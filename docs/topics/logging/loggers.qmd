# Loggers

The `Logger` class is the primary interface for interacting with the logging system in Python. It is responsible for generating log records and passing them to handlers.

## Reference Documentation {.hide}

Refer to the Python documentation for more information on handlers:

- [Logger class](https://docs.python.org/3/library/logging.html#logger-objects)


## The `root` Logger

When you import the `logging` module, it automatically creates a **root** logger that serves as the base of the logger hierarchy. 

```python
import logging
logging.warning("This is a warning message")
```

:::{.notes}
You can use this root logger directly through module-level functions without additional configuration.
:::


## Getting the `root` Logger Explicitly {.hide}

::: {.smaller-80}
When you call a module-level function like `logging.warning()`, it implicitly calls the `root` logger.  You can explicitly get the `root` logger as follows:

- `logging.getLogger()`: returns the `root` logger object.
- `logging.root`: is a direct reference to the `root` logger object.

```{.python filename="test.py"}
import logging

# Indirectly using the root logger
logging.warning("This is a warning message")

# Directly using the `logging` modules reference to the root logger
logging.root.warning("This is a warning message")

# Directly using the `getLogger` method to get the root logger object
logger = logging.getLogger()
logger.warning("This is a warning message")
```
:::

::: {.notes}
This is important because it can drive confusion when you see different ways of accessing the root logger -- but they are all equivalent:

- `logging.warning()`: Indirectly uses the root logger through convenience functions provided by the logging module.
- `logging.root.warning()`: Direct reference and usage of the root logger.
- `logging.getLogger()`: Fetches the root logger, and the logger object is used explicitly.
:::

## Creating a Logger {.hide}

::: {.smaller-80}
It is common to use multiple loggers, each dedicated to a specific component or module, allowing for more granular control.  You can create a logger using the `getLogger` method and passing a name to it.

<br />
Ways to create a logger:

<br />

::: {.columns}

::: {.column width="50%"}
```{.python filename="test.py"}
import logging
logger = logging.getLogger(__name__)
logger.warning("This is a warning.")
```
:::



::: {.column width="50%"}
```{.python filename="test.py"}
import logging
logger = logging.getLogger("app")
logger.warning("This is a warning.")
```
:::

:::

:::

::: {.notes}
The `__name__` variable is a special variable in Python that contains the module's name. If you are running a script directly, `__name__` will be set to `__main__`. This is useful for creating loggers that are specific to a module.
:::

## Hands-on: Creating Loggers {.exercise}


::: {.smaller-70}

```{.python filename="test.py"}
import logging

# Create three loggers

# TODO-1: create `root` logger
root_logger = pass
# TODO-2: Create logger using __name__ variable
module_logger = pass
# TODO-3: Create logger named "app"
app_logger = pass


def main():

    # Log warning message to the loggers

    # TODO-4: Log "warning logged to root logger" using root_logger
    # TODO-5: Log "warning logged to module logger" using module_logger
    # TODO-6: Log "warning logged to app logger" using app_logger


if __name__ == "__main__":
    main()

```

<br />

```{.bash code-line-numbers="false"}
$ python test.py
  
  

```

:::

## Child Loggers {.hide}

::: {.smaller-80}
Loggers can be organized in a hierarchical structure, where a logger can have child loggers.  Loggers are organized in a hierarchical namespace based on the logger names, which are separated by dots (.).

- **Naming Convention**:  When you create a logger with a name that includes dots, each part of the name separated by dots represents a level in the hierarchy.
- **Parent-Child Relationship**: A logger is considered a child of another logger if its name extends the parent's name with an additional dot-separated segment.


   ```{.python filename="test.py"}
   import logging
   parent_logger = logging.getLogger("parent")
   child_logger = logging.getLogger("parent.child")
   ```

:::

### Hands-on: Creating a Child Logger {.exercise}

::: {.smaller-70}

```{.python filename="test.py"}
import logging

# TODO-1: Create logger named "app"
app_logger = pass

def main():

    # Log warning message to the loggers
    # TODO-2: Log "warning logged to app logger" using app_logger

    # Create a child logger
    # TODO-3: Create a child logger named "app.child"
    child_logger = pass

    # Log a warning message to the child logger that includes
    # the parent logger's name in the message.
    # TODO-4: Log "warning logged to child logger of {child_logger.parent.name}"

    


if __name__ == "__main__":
    main()

```

<br />

```{.bash code-line-numbers="false"}
$ python test.py
  
  

```

:::