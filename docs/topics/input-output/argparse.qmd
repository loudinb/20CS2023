# `argparse` Module


- **`argparse`** is a built-in module used for **command-line argument parsing**.
- It allows your scripts to accept input arguments and options from the command line, enabling flexible and reusable code.


## Reference Documentation

The following resources from the official Python documentation provide more information on `argparse`:

- [argparse â€” Parser for command-line options, arguments, and sub-commands](https://docs.python.org/3/library/argparse.html)


## Using `argparse` {.hide}

- To use `argparse`, you must first import the module.

```{.python}
import argparse
```

- Create an `ArgumentParser` object to handle the command-line arguments.

```{.python}
parser = argparse.ArgumentParser(
  description="A simple argument parser example"
)
```

## Adding Arguments {.hide}

Use `add_argument()` to define the arguments your script will accept.

```{.python .smaller-90}
parser.add_argument("name", help="Your name")
parser.add_argument("--age", help="Your age")
```

<br />

::: {.smaller-90}
- **Positional Arguments**: Required arguments, like `name`.
- **Optional Arguments**: Arguments prefixed with `--` or `-`, like `--age`.
:::

## Specifying Argument Types {.hide}

You can specify the **type** of an argument to automatically convert it.

```python
parser.add_argument("--age", type=int, help="Your age")
```
<br />

::: {.callout-note .smaller-80 style="margin-left: 10%; margin-right: 10%;"}
If an incorrect type is provided, `argparse` will throw an error.
:::

## Parse and Use Arguments {.hide}

Once arguments are added, use `parse_args()` to retrieve the values.

```{.python .smaller-90}
import argparse
parser = argparse.ArgumentParser(
  description="A simple argument parser example"
)
parser.add_argument("name", help="Your name")

args = parser.parse_args()
print(f"Hello, {args.name}!")
```

<br />

::: {.callout-note .smaller-95 style="margin-left: 10%; margin-right: 10%;"}
**Access arguments** using `args.argument_name`.
:::


## Hands-on: Using `argparse` {.exercise}

Create a script that greets the user and displays their age.


::: {.smaller-85}
```{.python filename="greet.py"}
import argparse

# TODO-1: Create an ArgumentParser object (description="Greet the user")
# TODO-2: Add a required argument for the user's name (help="Your name")
# TODO-3: Add an optional argument for the user's age (help="Your age")
# TODO-4: Parse the arguments and assign to 'args' variable
# TODO-5: Print a greeting message with the user's name
# TODO-6: If user's age is provided, print a message with age
```
:::

Run from the command line:

```{.bash code-line-numbers="false"}
$ python greet.py Alice --age 30
```

Confirm an error is raised if the age is not an integer.
```{.bash code-line-numbers="false"}
$ python greet.py Alice --age thrity
```

## Default Values for Arguments {.hide}

Use the `default` parameter to provide a default value.

```python
parser.add_argument(
  "--color", default="blue", help="Favorite color (default: blue)"
)
```

In this example:

`--color` is optional; it will use `"blue"` if not provided.



## The `action` Parameter {.hide}

The `action` parameter in `add_argument()` allows you to specify how the argument should be handled.

- `store`: Default behavior; stores the argument value.
- `store_const`: Stores a constant value as specified by the `const` parameter.
- `store_true` / `store_false`: Stores True or False.
- `append`: Adds multiple occurrences of an argument to a list.
- `append_const`: Appends a constant value to a list, value is specified by `const` parameter.
- `count`: Counts occurrences of the argument.
- `version`: Shows version information, as specified by the `version` parameter.

### Adding Boolean Flags {.hide}

::: {.smaller-80}
**Boolean flags** are useful to turn features on/off without needing explicit values.  This is enabled by using the `action` parameter and setting it to `"store_true"` or `"store_false"`.

```python
parser.add_argument(
  "--verbose", action="store_true", help="Enable verbose output"
)
```

Another approach using `store_const`:

```python
parser.add_argument(
  "--verbose", action="store_const", const=True, default=False,
  help="Enable verbose output"
)
```

What happens in the second example if `default=False` is omitted?
:::



## Automatic Help Message {.hide}

`argparse` generates a help message when `--help` or `-h` is used.

```sh
$ python greet.py --help
```

Output:

```
usage: greet.py [-h] [--age AGE] name

Greet the user

positional arguments:
  name        Your name

optional arguments:
  -h, --help  show this help message and exit
  --age AGE   Your age
```


## Required Optional Arguments {.hide}

You can make an **optional argument** required by setting `required=True`.

```python
parser.add_argument(
  "--country", required=True, help="Country of residence"
)
```

::: {.smaller-85}
**Why use required optional arguments?**

- They give users more control over how to input values, without being restricted by argument order.
- The argument name (e.g., `--country`) makes the command more explicit and easier to understand.
:::

## Using Choices for Arguments {.hide}

You can restrict values using `choices` for fixed options.

```python
parser.add_argument(
  "--color", choices=["red", "blue", "green"], help="Color choice"
)
```

If an invalid value is provided, `argparse` will print an error.
