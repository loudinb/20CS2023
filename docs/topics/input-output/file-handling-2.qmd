## Introduction

- File handling in Python is a powerful and versatile tool
- Allows for a wide range of operations
- Important to consider advantages and disadvantages

## Python File Handling

- Python supports various file handling operations
- Allows reading, writing, and other operations on files
- Implementation is easy and short compared to other languages
- Python treats files as text or binary

## Advantages of File Handling in Python

1. Versatility
2. Flexibility
3. User-friendly
4. Cross-platform compatibility

## Disadvantages of File Handling in Python

1. Error-prone
2. Security risks
3. Complexity
4. Performance considerations

## File Open Modes

```python
f = open(filename, mode)
```

- `r`: read (default)
- `w`: write (overwrite)
- `a`: append
- `r+`: read and write
- `w+`: write and read (overwrite)
- `a+`: append and read

## Reading Files

Example 1: Reading line by line

```python
file = open('geek.txt', 'r')
for each in file:
    print(each)
```

## Reading Files (cont.)

Example 2: Reading entire file

```python
file = open("geeks.txt", "r")
print(file.read())
```

## Reading Files (cont.)

Example 3: Using `with` statement

```python
with open("geeks.txt") as file:
    data = file.read()
    print(data)
```

## Writing Files

Example: Writing to a file

```python
file = open('geek.txt','w')
file.write("This is the write command")
file.write("It allows us to write in a particular file")
file.close()
```

## Appending to Files

Example: Appending to a file

```python
file = open('geek.txt', 'a')
file.write("This will add this line")
file.close()
```

## File Handling Functions

- `open()`: Opens a file
- `read()`: Reads from a file
- `write()`: Writes to a file
- `close()`: Closes the file

## Advanced File Operations

- Renaming files
- Deleting files
- Using `tell()` to get file pointer position
- Using `seek()` to set file pointer position

