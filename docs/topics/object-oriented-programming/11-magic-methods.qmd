# Magic Methods

Magic methods (also known as **dunder methods**) are special methods with double underscores (e.g., `__init__`).  They allow customization of how objects behave in various contexts.


## Object Construction and Initialization {.hide}

::: {.smaller-80}
Object creation and initialization are managed by two magic methods:

- **`__new__(cls, ...)`**: Creates a new instance before `__init__` is called.
- **`__init__(self, ...)`**: Initializes a new instance of a class.
  
```python
class MyClass:
    def __init__(self, value):
        self.value = value
```
:::

## Object Representation {.hide}

::: {.smaller-80}
Object representation methods:

- **`__str__(self)`**: User-friendly string representation, used with `print()`.
- **`__repr__(self)`**: Formal string representation, ideally used to recreate the object.
  
```python
class MyClass:
    def __str__(self):
        return f"MyClass with value {self.value}"

    def __repr__(self):
        return f"MyClass(value={self.value})"
```
:::

## Comparison Magic Methods {.hide}

::: {.smaller-80}
Comparison magic methods:

- **`__eq__(self, other)`**: Defines behavior for equality (`==`).
- **`__ne__(self, other)`**: Defines behavior for inequality (`!=`).
- **`__lt__(self, other)`**: Less than (`<`).
- **`__le__(self, other)`**: Less than or equal to (`<=`).
- **`__gt__(self, other)`**: Greater than (`>`).
- **`__ge__(self, other)`**: Greater than or equal to (`>=`).
:::

## Mathematical Operators {.hide}

::: {.smaller-80}
Mathematical operator magic methods:

- **`__add__(self, other)`**: Addition (`+`).
- **`__sub__(self, other)`**: Subtraction (`-`).
- **`__mul__(self, other)`**: Multiplication (`*`).
- **`__truediv__(self, other)`**: Division (`/`).
- **`__mod__(self, other)`**: Modulus (`%`).
:::

## In-Place Operators {.hide}

::: {.smaller-80}
In-place operator magic methods:

- **`__iadd__(self, other)`**: In-place addition (`+=`).
- **`__isub__(self, other)`**: In-place subtraction (`-=`).
:::  


## Attribute Access and Manipulation {.hide}

::: {.smaller-80}
Attribute access magic methods:

- **`__getattr__(self, name)`**: Called when an attribute doesn't exist.
- **`__setattr__(self, name, value)`**: Called when setting an attribute.
- **`__delattr__(self, name)`**: Called when deleting an attribute.
:::

## Container and Sequence Protocols {.hide}

::: {.smaller-80}
Container and sequence magic methods:

- **`__len__(self)`**: Defines behavior for `len()`.
- **`__getitem__(self, key)`**: Called to get an item (`obj[key]`).
- **`__setitem__(self, key, value)`**: Called to set an item (`obj[key] = value`).
- **`__delitem__(self, key)`**: Called to delete an item (`del obj[key]`).
:::

## Iteration and Iterable Protocols {.hide}

::: {.smaller-80}
Iteration magic methods:

- **`__iter__(self)`**: Defines how to iterate over an object.
- **`__next__(self)`**: Called to get the next item in an iteration.
:::  

## Callable Objects {.hide}

::: {.smaller-80}
Callable magic method:

- **`__call__(self, ...)`**: Allows an instance to be called like a function.

```python
class MyCallable:
    def __call__(self, *args):
        print(f"Called with arguments {args}")
```
:::

## Context Management {.hide}

::: {.smaller-80}
Context management magic methods:

- **`__enter__(self)`**: Called when entering a `with` block.
- **`__exit__(self, exc_type, exc_val, exc_tb)`**: Called when exiting a `with` block.

```python
class MyContext:
    def __enter__(self):
        print("Entering context")
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        print("Exiting context")
```
:::

## Copying and Hashing {.hide}

::: {.smaller-80}
Copying and hashing magic methods:

- **`__copy__(self)`**: Defines behavior for shallow copies.
- **`__deepcopy__(self, memo)`**: Defines behavior for deep copies.
- **`__hash__(self)`**: Defines behavior for hashing, used for storing in sets or as dictionary keys.
:::

## Object Deletion {.hide}

::: {.smaller-80}
Object deletion magic method:

- **`__del__(self)`**: Called when an object is about to be destroyed by the garbage collector.
  
```python
class MyClass:
    def __del__(self):
        print("Object is being deleted")
```
:::

## Summary {.hide}

::: {.smaller-80}

- Python magic methods enable powerful object-oriented behavior by allowing you to define how your objects behave in specific situations.
- Understanding and using these methods helps you build more flexible and Pythonic classes.
:::