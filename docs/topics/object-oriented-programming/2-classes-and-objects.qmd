# Classes and Objects

## Overview

- What is a Class?
- Defining a Class
- What is an Object?
- Creating Objects (Instantiation)
- Accessing Attributes
- Adding Methods to a Class
- Using Methods
- The `self` Parameter
- The `__init__` Method

::: {.notes}
Welcome to our session on Classes and Objects in Python. Today, we'll explore the fundamental building blocks of Object-Oriented Programming. We'll learn how to define classes, create objects, and work with attributes and methods. This knowledge will form the foundation of our journey into OOP.
:::


## What is a Class?

- A blueprint for creating objects
- Defines attributes (data) and methods (functions)
- Allows us to create multiple objects with the same structure

::: {.notes}
A class in Python is like a blueprint or a template. It defines the structure and behavior that all objects of that class will have. Think of it as a way to create your own custom data type.

- Attributes are the data associated with the class. They represent the state or properties of an object.
- Methods are functions defined within the class. They represent the behaviors or actions that objects of the class can perform.

By defining a class, we can create multiple objects that share the same structure but can have different values for their attributes. This is a powerful way to organize and structure our code.
:::


## Defining a Class

```python
class User:
    def __init__(self, username, bio):
        self.username = username
        self.bio = bio
        self.posts = []
```

::: {.notes}
Here's how we define a simple class in Python:

1. We use the `class` keyword followed by the name of the class (in this case, `User`).
2. The `__init__` method is a special method called a constructor. It's called when we create a new object of this class.
3. The `self` parameter refers to the instance being created. It's how the method knows which object it's working with.
4. We define attributes by assigning values to `self.attribute_name`.

In this example, we're creating a `User` class with attributes for `username`, `bio`, and `posts`. Each user will have their own username and bio, and start with an empty list of posts.
:::


## What is an Object?

- An instance of a class
- Has its own unique set of attribute values
- Shares methods defined by the class

::: {.notes}
An object is a specific instance of a class. If a class is like a blueprint, an object is like a house built from that blueprint. 

- Each object has its own set of attributes, which can have different values from other objects of the same class.
- All objects of a class share the same methods, but these methods can behave differently based on the object's attribute values.

Objects allow us to work with specific instances of the data structures we define in our classes. They're the concrete realization of the abstract concept defined by the class.
:::


## Creating Objects (Instantiation)

```python
user1 = User("john_doe", "Just another user")
user2 = User("jane_smith", "Loves photography")
```

::: {.notes}
Creating an object from a class is called instantiation. Here's how we do it:

1. We use the class name followed by parentheses, as if we're calling a function.
2. We pass arguments that match the parameters defined in the `__init__` method (except for `self`, which is handled automatically by Python).
3. This creates a new object and calls the `__init__` method to set up its initial state.

In this example, we create two `User` objects with different usernames and bios. Each of these objects is a separate instance of the `User` class, with its own set of attribute values.
:::


## Accessing Attributes

```python
print(user1.username)  # Output: john_doe
print(user2.bio)       # Output: Loves photography
```

::: {.notes}
We can access an object's attributes using dot notation. This allows us to retrieve or modify the data stored in the object.

- We write the object name, followed by a dot, followed by the attribute name.
- This gives us the value of that attribute for that specific object.

In the example, we're accessing the `username` of `user1` and the `bio` of `user2`. Each object maintains its own set of attributes, so these values are specific to each user.
:::


## Adding Methods to a Class

```python
class User:
    def __init__(self, username, bio):
        self.username = username
        self.bio = bio
        self.posts = []
    
    def add_post(self, post):
        self.posts.append(post)
```

::: {.notes}
Methods are functions that are defined inside a class. They define the behaviors that objects of the class can perform. Here's how we add a method:

1. We define the method inside the class, just like we would define a function.
2. The first parameter is always `self`, which refers to the object the method is being called on.
3. We can use `self` to access the object's attributes and other methods.

In this example, we've added an `add_post` method to our `User` class. This method allows a user to add a new post to their list of posts.
:::


## Using Methods

```python
user1.add_post("Hello, world!")
print(user1.posts)  # Output: ['Hello, world!']
```

::: {.notes}
We call methods on an object using dot notation, similar to how we access attributes. Here's how it works:

1. We write the object name, followed by a dot, followed by the method name and parentheses.
2. We pass any required arguments inside the parentheses (not including `self`, which is handled automatically).

In this example, `user1` adds a post by calling the `add_post` method. We then print `user1.posts` to see that the new post has been added to the list.

Methods allow objects to perform actions or behaviors. They can modify the object's attributes or perform other operations using the object's data.
:::


## The `self` Parameter

- Represents the instance of the class
- Used to access attributes and methods within the class
- Must be the first parameter in instance methods

::: {.notes}
The `self` parameter is a crucial concept in Python classes:

1. `self` represents the instance of the class. It's how a method knows which specific object it's working with.
2. When we call a method on an object, Python automatically passes the object as the first argument to the method. This becomes the `self` parameter.
3. We use `self` to access the object's attributes and other methods within the class definition.
4. By convention, we name this parameter `self`, but technically, you could use any valid variable name.

Understanding `self` is key to working with classes and objects in Python. It's what allows each object to maintain its own state and perform actions based on its specific data.
:::


## The `__init__` Method

- Called automatically when creating a new object
- Used to initialize attributes
- The `self` parameter refers to the new object

::: {.notes}
The `__init__` method is a special method in Python classes:

1. It's called a constructor because it's used to construct new objects of the class.
2. Python calls this method automatically when we create a new object of the class.
3. We use it to set up the initial state of the object by assigning values to attributes.
4. The `self` parameter in `__init__` refers to the new object being created.

The `__init__` method allows us to ensure that every object starts with the attributes we want it to have. It's a crucial part of defining the structure of our objects.
:::


## Summary

- Classes are blueprints for creating objects
- Objects are instances of a class with their own attribute values
- We use dot notation to access attributes and call methods
- The `self` parameter represents the instance in method definitions
- The `__init__` method initializes new objects

::: {.notes}
Let's recap what we've learned about classes and objects:

1. Classes serve as blueprints or templates for creating objects. They define the structure and behavior that all objects of that class will have.
2. Objects are specific instances of a class. Each object has its own set of attribute values but shares methods with other objects of the same class.
3. We use dot notation (object.attribute or object.method()) to work with objects.
4. The `self` parameter is crucial in method definitions. It represents the specific object the method is being called on.
5. The `__init__` method is a special method used to set up new objects when they're created.

These concepts form the foundation of Object-Oriented Programming in Python. In our next sessions, we'll build on this knowledge to create more complex and powerful programs.
:::