# Classes and Objects

## What is a Class?

- A blueprint for creating objects
- Defines attributes (data) and methods (functions)
- Allows us to create multiple objects with the same structure

::: {.notes}
A class in Python is like a blueprint or a template. It defines the structure and behavior that all objects of that class will have. Think of it as a way to create your own custom data type.

Key points to emphasize:
1. A class is not an object itself, but a description of how to create objects.
2. It encapsulates both data (attributes) and behavior (methods) in a single unit.
3. Classes allow us to create complex data structures that model real-world concepts or abstract ideas.

Example: A `Car` class might define attributes like `color` and `model`, and methods like `start_engine()` and `drive()`.
:::


## Defining a Class

```python
class User:
    pass
```

::: {.notes}
Here's how we define a simple class in Python:

1. We use the `class` keyword to start the class definition.
2. This is followed by the name of the class (in this case, `User`). By convention, class names in Python use CamelCase.
3. The colon (:) indicates the start of the class body.
4. In this simple example, we use `pass` as a placeholder. It means "do nothing" and is used when we want to have an empty class.

This `User` class doesn't have any attributes or methods yet, but it's a valid class definition. We'll add more to it as we progress.

It's important to note that indentation is crucial in Python. The body of the class (everything that belongs to the class) must be indented.
:::


## The `__init__` Method

```python
class User:
    def __init__(self, username, email):
        self.username = username
        self.email = email
```

::: {.notes}
The `__init__` method is a special method in Python classes:

1. It's called a constructor because it's used to construct new objects of the class.
2. Python calls this method automatically when we create a new object of the class.
3. The name `__init__` is special in Python. The double underscores indicate it's a special method.
4. The first parameter is always `self`, which refers to the instance being created.
5. We can add other parameters (`username` and `email` in this case) to initialize the object with specific values.
6. Inside `__init__`, we typically set up the initial state of the object by assigning values to attributes.

In this example:
- `self.username = username` creates an attribute called `username` and assigns it the value of the `username` parameter.
- `self.email = email` does the same for the `email` attribute.

The `__init__` method allows us to ensure that every object starts with the attributes we want it to have. It's a crucial part of defining the structure of our objects.
:::


## Attributes and Methods: A Brief Introduction

- Attributes: Data associated with an object
- Methods: Functions that operate on the object's data

```python
class User:
    def __init__(self, username, email):
        self.username = username  # attribute
        self.email = email        # attribute
    
    def display_info(self):       # method
        print(f"Username: {self.username}, Email: {self.email}")
```

::: {.notes}
Before we dive deeper into objects, let's briefly introduce attributes and methods:

1. Attributes are variables that store data for each object. In our `User` class, `username` and `email` are attributes.

2. Methods are functions defined inside a class that can operate on the object's data. The `display_info` method in our example is a simple method that prints the user's information.

3. Both attributes and methods are accessed using dot notation (e.g., `user.username` or `user.display_info()`).

We'll explore attributes and methods in more detail in the next topic. For now, it's important to understand that classes can contain both data (attributes) and behavior (methods).
:::


## What is an Object?

- An instance of a class
- Has its own unique set of attribute values
- Shares methods defined by the class

::: {.notes}
An object is a specific instance of a class. If a class is like a blueprint, an object is like a house built from that blueprint. 

Key points about objects:
1. Each object has its own set of attributes, which can have different values from other objects of the same class.
2. All objects of a class share the same methods, but these methods can behave differently based on the object's attribute values.
3. Objects allow us to work with specific instances of the data structures we define in our classes.
4. They're the concrete realization of the abstract concept defined by the class.

Example: If `User` is our class, we might create objects like `user1` and `user2`, each with their own `username` and `email` values.

Objects are fundamental to object-oriented programming because they allow us to create and manipulate multiple instances of our custom data types, each with its own state.
:::


## Creating Objects (Instantiation)

```python
user1 = User("alice", "alice@example.com")
user2 = User("bob", "bob@example.com")

print(user1.username)  # Output: alice
print(user2.email)     # Output: bob@example.com
user1.display_info()   # Output: Username: alice, Email: alice@example.com
```

::: {.notes}
Creating an object from a class is called instantiation. Here's how we do it:

1. We use the class name followed by parentheses, as if we're calling a function.
2. We pass arguments that match the parameters defined in the `__init__` method (except for `self`, which is handled automatically by Python).
3. This creates a new object and calls the `__init__` method to set up its initial state.
4. The new object is then assigned to a variable (`user1` and `user2` in this case).

After creating the objects, we can access their attributes and methods using dot notation:
- `object.attribute` to access attributes
- `object.method()` to call methods

In the example:
- We create two `User` objects with different usernames and emails.
- We then print out the `username` of `user1` and the `email` of `user2`.
- Finally, we call the `display_info()` method on `user1`.

This demonstrates how each object is a distinct instance with its own set of attribute values, but shares methods defined in the class.

Instantiation is how we put our class definitions to use, creating concrete objects that we can work with in our programs.
:::


## Summary

- Classes are blueprints for creating objects
- The `__init__` method initializes new objects
- Objects are instances of a class with their own attribute values
- We create objects through instantiation
- We can access object attributes and methods using dot notation

::: {.notes}
Let's recap what we've learned about classes and objects:

1. Classes serve as blueprints or templates for creating objects. They define the structure and behavior that all objects of that class will have.

2. The `__init__` method is a special method (constructor) that sets up the initial state of new objects. It's called automatically when we create an object.

3. Attributes are variables that store data for each object, while methods are functions that can operate on this data.

4. Objects are specific instances of a class. Each object has its own set of attribute values but shares methods with other objects of the same class.

5. We create objects (instantiation) by calling the class name like a function and passing any required arguments for the `__init__` method.

6. We can access an object's attributes and methods using dot notation (object.attribute or object.method()).

These concepts form the foundation of Object-Oriented Programming in Python. In our next session, we'll explore instance attributes and methods in more detail, building on this foundation to create more complex and powerful programs.

Remember, the goal of OOP is to create code that's organized, reusable, and models real-world concepts effectively. Classes and objects are the primary tools we use to achieve this goal.
:::