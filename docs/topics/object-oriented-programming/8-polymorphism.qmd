# Polymorphism

## What is Polymorphism?

Poly means many, and morph means forms. Polymorphism is a core concept in object-oriented programming that allows objects of different types to respond to the same method call.

- Ability of objects of different types to respond to the same method call
- Allows for flexible and generic programming
- Enables code to work with objects of multiple classes

::: {.notes}
Polymorphism is a fundamental concept in object-oriented programming that enhances code flexibility and reusability. It allows objects of different classes to be treated as objects of a common superclass. This enables more generic and abstract code, reducing dependencies on specific implementations. In practice, polymorphism manifests in several ways:

- Method overriding: Subclasses can provide specific implementations of methods defined in their superclass.
- Interface implementation: Different classes can implement the same interface, ensuring they have certain methods.
- Duck typing: In languages like Python, objects are treated based on their behavior rather than their class.

Polymorphism is crucial for creating extensible and maintainable code, as it allows new classes to be added with minimal changes to existing code.
:::


## Behavior-Driven Polymorphism {.hide}

::: {.smaller-80}

Duck Typing is a concept in Python where objects are evaluated based on their behavior rather than their type, this can be seen as **behavior-driven polymorphism**.

::: {style="text-align: center; font-style: italic;"}
“If it walks like a duck and quacks like a duck, it’s probably a duck.”
:::

- **Behavior over inheritance**: Objects can be used as long as they provide the required methods, regardless of their class or type.
:::

::: {.smaller-60}
```python
class Dog:
    def speak(self):
        return "Woof!"

class Cat:
    def speak(self):
        return "Meow!"

class Duck:
    def speak(self):
        return "Quack!"

def make_speak(animal):
    print(animal.speak())

make_speak(Dog())   # Output: Woof!
make_speak(Cat())   # Output: Meow!
make_speak(Duck())  # Output: Quack!
```
:::

::: {.notes}
Duck typing is a key aspect of Python's dynamic nature and a prime example of behavior-driven polymorphism. It focuses on an object's capabilities rather than its type. This approach offers several advantages:

- Flexibility: Objects can be used interchangeably as long as they support the required methods.
- Loose coupling: Code depends on object behavior, not specific types, reducing dependencies.
- Extensibility: New classes can easily integrate with existing code by implementing the necessary methods.

However, duck typing also has potential drawbacks:

- Runtime errors: Type mismatches are only caught at runtime, which can lead to unexpected errors.
- Reduced clarity: It may not be immediately clear what methods an object should implement.

Despite these challenges, duck typing is a powerful feature that enables more flexible and adaptable code designs in Python.
:::

### Hands-On: Duck Typing {background-color="rgb(204, 255, 255)"}

What happens?

```python
class Dog:
   def speak(self):
      return "Woof!"

class Cat:
   def speak(self):
      return "Meow!"

class Starfish:
   pass

def make_speak(animal):
   print(animal.speak())

make_speak(Dog())      
make_speak(Cat())      
make_speak(Starfish())
```

::: {.notes}
This is duck typing in action because:

- The function make_speak doesn't care about the specific class of the object, just that the object can perform the required action (in this case, calling speak()).
- It is an example of dynamic polymorphism because different types of objects (e.g., Dog, Cat, etc.) are treated uniformly (i.e., they are passed to make_speak) based on the fact that they implement a specific method (speak()), not based on their class or type.
- There's no need for explicit type checks, inheritance, or interfaces.
- As long as the object behaves like a "duck" (has the method speak()), it works. If not, an error occurs at runtime.

_Note: In Python, methods are considered a type of attribute. When you try to access an attribute (whether it’s a variable or a method) that doesn’t exist, Python raises an AttributeError._
:::

## Method Overriding {.hide}

**Method overriding** is a form of polymorphism that allows a subclass to provide a specific implementation of a method that is already defined in its superclass.

::: {.smaller-80}
For example, this child class redefines the `speak` method inherited from the parent class:

```python
class Animal:

   def __init__(self, name):
      self.name = name

   def speak(self):
      return f"{self.name} makes a generic animal sound."

class Dog(Animal):

   def speak(self):
      return f"{self.name} says Woof!"

class Cat(Animal):

   def speak(self):
      return f"{self.name} says Meow!"
```
:::


::: {.notes}
Method overriding is a crucial aspect of polymorphism in object-oriented programming. It allows a subclass to provide a specific implementation of a method that is already defined in its superclass. Key points to understand about method overriding include:

- Inheritance relationship: Overriding occurs in a parent-child class relationship.
- Same method signature: The overriding method in the subclass must have the same name and parameter list as the method in the superclass.
- Runtime polymorphism: The decision about which method to call is made at runtime based on the actual type of the object.
- Extensibility: It allows for extending or modifying the behavior of inherited methods without altering the superclass code.
- Liskov Substitution Principle: Overridden methods should respect the contract established by the superclass method.

Method overriding is essential for implementing polymorphic behavior and creating flexible, extensible class hierarchies.
:::


### Hands-On: Method Overriding {background-color="rgb(204, 255, 255)"}


```python
class Animal:

   def __init__(self, name):
      self.name = name

   def speak(self):
      return f"{self.name} makes a generic animal sound."

class Dog(Animal):

   def speak(self):
      return f"{self.name} says Woof!"

class Cat(Animal):

   def jump(self):
      return f"{self.name} jumps high!"
```


## Operator Overloading {.hide}

**Operator Overloading** is a form of polymorphism that allows custom classes to define how built-in operators work with their objects.

:::{.smaller-70}
- Customizing how built-in operators work with user-defined classes
- Implemented using special method names (dunder methods)

```python
class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    
    def __add__(self, other):
        return Point(self.x + other.x, self.y + other.y)
    
    def __str__(self):
        return f"({self.x}, {self.y})"

p1 = Point(1, 2)
p2 = Point(3, 4)
p3 = p1 + p2

print(p3)  # Output: (4, 6)
```
:::

::: {.notes}
Operator overloading is a powerful feature in Python that allows custom classes to define how built-in operators work with their objects. This concept is important for several reasons:

- Intuitive syntax: It allows custom objects to use familiar operator syntax, making code more readable and intuitive.
- Consistent behavior: Custom objects can behave similarly to built-in types, providing a consistent programming experience.
- Expressive code: Complex operations can be expressed concisely using overloaded operators.

Key points about operator overloading in Python:

- Special methods: Implemented using dunder (double underscore) methods like add, mul, etc.
- Type checking: It's important to include type checking to ensure operations are performed on compatible objects.
- Returning new objects: Overloaded operators typically return new objects rather than modifying existing ones.
- Consistency: Overloaded operators should behave consistently with their mathematical or logical counterparts.

While powerful, operator overloading should be used judiciously to maintain code clarity and prevent unexpected behavior.
:::

### Magic Methods {.hide}

::: {.smaller-80}
::: {.callout-note}
Magic methods are the methods starting and ending with double underscores `__`. They are defined by built-in classes in Python and commonly used for operator overloading. They are also called Dunder methods, Dunder here means "Double Under (Underscores)".

- The `__add__()` method is called to implement the arithmetic addition operation `+`.
- The `__mul__()` method is called to implement the arithmetic multiplication operation `*`.
- The `__str__()` method returns a human-readable, or informal, string representation of an object which is called by the built-in `print()`, `str()`, and `format()` functions.
:::
:::

::: {.notes}
Magic methods, also known as dunder methods, are special methods in Python that have double underscores before and after their names. They play a crucial role in defining the behavior of classes and objects. Key points about magic methods include:

- Automatic invocation: These methods are called automatically in specific situations, such as when using operators or built-in functions.
- Customization: They allow customization of object behavior, enabling objects to work seamlessly with Python's built-in operations and functions.
Common magic methods:

   - init: Constructor for initializing new objects
   - str: Defines string representation of an object
   - len: Allows objects to use the len() function
   - getitem, setitem: Enable indexing and slicing operations


- Operator overloading: Many magic methods are used for operator overloading, like add for '+', mul for '*', etc.
- Best practices: While powerful, magic methods should be used judiciously and consistently to maintain code readability and avoid unexpected behavior.

Understanding and properly implementing magic methods is crucial for creating Pythonic, intuitive, and powerful custom classes.
:::


### Hands-On: Operator Overloading {background-color="rgb(204, 255, 255)"}

::: {.smaller-80}
```python
class Potion:
    def __init__(self, name, power_level):
        self.name = name
        self.power_level = power_level

    def __mul__(self, other):
        # Overload the * operator to mix two potions and increase power
        if isinstance(other, Potion):
            combined_name = f"{self.name}-{other.name} Elixir"
            combined_power = self.power_level + other.power_level
            return Potion(combined_name, combined_power)
        raise ValueError("Can only mix with another Potion!")

    def __str__(self):
        return f"Potion: {self.name}, Power Level: {self.power_level}"

# Create potions
healing_potion = Potion("Healing", 50)
strength_potion = Potion("Strength", 70)

# Mix two potions using the overloaded * operator
super_potion = healing_potion * strength_potion
print(super_potion)
```
:::


## Method Overloading

Method overloading is a form of polymorphism that allows a class to define multiple methods with the same name but different parameter lists.

### Statically Typed Languages

In statically typed languages like C and C++, method overloading is resolved at compile time based on the method signature -- multiple functions with the same name but different parameter lists:

```c
int add(int a, int b) {
    return a + b;
}

int add(int a, int b, int c) {
    return a + b + c;
}
```

::: {.notes}
Mentioning this to contrast with Python's approach to method overloading.
:::

### In Python

Python doesn't support traditional method overloading, but it can be achieved through default arguments or variable-length arguments.

```python
class Calculator:
    def add(self, a, b=0, c=0):
        return a + b + c

calc = Calculator()
print(calc.add(1))        # Output: 1
print(calc.add(1, 2))     # Output: 3
print(calc.add(1, 2, 3))  # Output: 6
```

::: {.notes}
Method overloading is a form of polymorphism that allows a class to have multiple methods with the same name but different parameter lists. While traditional method overloading (as seen in languages like Java or C++) is not supported in Python, similar functionality can be achieved through other means:

- Default arguments: Defining methods with default parameter values allows for flexible method calls with varying numbers of arguments.
- Variable-length arguments: Using *args and **kwargs allows methods to accept any number of positional or keyword arguments.
- Multiple dispatch: Third-party libraries like multipledispatch can be used to implement method overloading in Python.
- Type checking: Manually checking argument types within a method can simulate overloading behavior.

Advantages of Python's approach:

- Simplicity: A single method can handle multiple cases, reducing code duplication.
- Flexibility: Methods can easily adapt to different numbers and types of arguments.

Considerations:

- Clarity: Complex logic within a single method can reduce code readability.
Documentation: Clear documentation is crucial to explain the various ways a method can be called.

While not traditional overloading, Python's approach aligns with its philosophy of simplicity and flexibility.
:::