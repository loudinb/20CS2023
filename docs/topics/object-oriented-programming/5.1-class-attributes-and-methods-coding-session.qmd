# Class Attributes and Methods Coding Session

## Overview

In this coding session, you will enhance the existing classes with class attributes and methods, and create a new `Analytics` class to practice these concepts further.

## Step 1: Enhance the `User` Class

Update the `user.py` file:

1. Add a class attribute `total_users` to keep track of the number of users.
2. Implement a class method `get_user_count` that returns the total number of users.
3. Create a static method `is_valid_username` that checks if a username meets certain criteria (e.g., length, allowed characters).
4. Add a class method `create_anonymous_user` that creates a user with a generated username.

## Step 2: Enhance the `Post` Class

Update the `post.py` file:

1. Add a class attribute `post_id_counter` to generate unique IDs for posts.
2. Implement a class method `get_post_count` that returns the total number of posts created.
3. Create a static method `is_valid_content` that checks if the post content is appropriate (e.g., not empty, within character limit).
4. Add a class method `create_shared_post` that creates a new post as a share of an existing post.

## Step 3: Enhance the `Comment` Class

Update the `comment.py` file:

1. Add a class attribute to track the total number of comments across all posts.
2. Implement a class method to get the average number of comments per post.
3. Create a static method to format comment content (e.g., remove extra whitespace, capitalize first letter).

## Step 4: Create an `Analytics` Class

Create a new file `analytics.py`:

1. Implement an `Analytics` class with the following features:
   - Class attributes to store app-wide statistics (e.g., total likes, total shares, active users).
   - Class methods to update these statistics.
   - Static methods for data analysis (e.g., calculating engagement rates, identifying trending posts).
   - A class method to generate a summary report of app statistics.

## Step 5: Implement Tagging System

Create a new file `tag.py`:

1. Implement a `Tag` class with the following features:
   - A class attribute to store all created tags.
   - A class method to get or create a tag (ensuring no duplicate tags).
   - Static methods for trending tag analysis.

2. Update the `Post` class to use the `Tag` class for handling hashtags.
