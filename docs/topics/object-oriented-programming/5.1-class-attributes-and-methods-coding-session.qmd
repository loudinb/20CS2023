# Coding Session: Class Attributes and Methods


## Overview

In this coding session, we will enhance our `User` class by adding class attributes and methods. We'll implement features that are relevant to the class as a whole, such as tracking the total number of users and posts, and creating class methods for user management.


## Step 1: Add Class Attributes

Open the `user.py` file and add the following class attributes to the `User` class:

1. `total_users`: Initialize to 0
2. `total_posts`: Initialize to 0


## Step 2: Update the `__init__` Method

Modify the `__init__` method:

1. Increment `User.total_users` each time a new user is created.
2. Add a new protected instance attribute `_user_id` and assign it the current value of `total_users`.


## Step 3: Update the `create_post` Method

Modify the `create_post` method:

1. Increment `User.total_posts` each time a new post is created.


## Step 4: Create a Class Method to Display Stats

Add a class method called `display_user_stats`:

1. Use the `@classmethod` decorator.
2. The method should return a string with the total number of users and posts.


## Step 5: Implement a Class Method as an Alternative Constructor

Create a class method called `create_anonymous`:

1. Use the `@classmethod` decorator.
2. This method should create and return a new `User` instance with the username "Anonymous", a generic email, and an empty bio.


## Step 6: Add a Static Method

Add a static method called `is_valid_username`:

1. Use the `@staticmethod` decorator.
2. This method should take a username as an argument and return `True` if it's valid (e.g., only alphanumeric characters and underscores), and `False` otherwise.
3. Update the username setter to use this static method for validation.


## Step 7: Implement User Search Functionality

Add a class method called `search_users`:

1. Use the `@classmethod` decorator.
2. This method should take a search term as an argument.
3. It should return a list of users whose usernames or emails match the search term.
4. To implement this, you'll need to maintain a list or dictionary of all created users as a class attribute.


## Step 8: Testing Class Attributes and Methods

Create a new Python file called `test_user_class.py`:

1. Import the `User` class from `user.py`.
2. Create several `User` instances.
3. Test the new class attributes and methods:
   - Print the total number of users and posts
   - Create an anonymous user
   - Validate usernames
   - Search for users
4. Verify that class attributes are shared among all instances.


## Conclusion

In this coding session, we've expanded our `User` class with class attributes and methods. These additions allow us to manage and interact with the class as a whole, providing functionality that goes beyond individual instances. This approach is crucial for implementing features that affect all users or require class-wide information.

::: {.notes}
This coding session introduces class attributes and methods to the `User` class. It demonstrates how to use class attributes to maintain state across all instances, how to create alternative constructors using class methods, and how to implement utility functions as static methods. The session also includes a more complex class method for user search, encouraging students to think about class-level operations. This builds upon the previous sessions, showing how individual instances, encapsulation, and class-level features can all work together in a well-designed class.
:::