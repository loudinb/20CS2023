# Classes and Objects Coding Session

## Overview

In this coding session, you will create two classes for our Instagram-like app: `User` and `Post`. You'll define these classes in separate files to practice good code organization.

## Step 1: Create `user.py` and `post.py` Files

Create two new Python files named `user.py` and `post.py`.

1. Open your preferred text editor or IDE.
2. Create two new files and save them as `user.py` and `post.py` in your project directory.
3. At the top of both files, import the `datetime` module.

## Step 2: Create the `User` Class

In your `user.py` file, create a `User` class with the following requirements:

1. Import the `Post` class from `post.py`.
2. Define an `__init__` method that takes `username` and `email` as parameters.
3. Initialize instance attributes for `username`, `email`, and `join_date` (use `datetime.now()` for `join_date`).
4. Initialize an empty list called `posts` to store the user's posts.

## Step 3: Create the `Post` Class

In your `post.py` file, create a `Post` class with these requirements:

1. Define an `__init__` method that takes `user` and `content` as parameters.
2. Initialize instance attributes for `user`, `content`, `timestamp` (use `datetime.now()`), and `likes` (initialize to 0).

## Step 4: Add Methods to the `User` Class

In `user.py`, add the following methods to your `User` class:

1. `create_post(self, content)`: Creates a new `Post` instance and adds it to the user's `posts` list.
2. `display_info(self)`: Prints out the user's username, email, join date, and number of posts.

## Step 5: Add a Method to the `Post` Class

In `post.py`, add a `display(self)` method to your `Post` class that prints out the post's content, timestamp, and number of likes.
