---

---

## Object-Oriented Programming (OOP)

- **Object-Oriented Programming (OOP):** A programming paradigm that organizes code into "objects," promoting modularity, reusability, and scalability.

- **Class:** A blueprint for creating objects.
  - Defines the structure (attributes) and behavior (methods) of the objects.
  - Contains shared data and methods applicable to all instances.

- **Object:** An instance of a class. A self-contained unit of software that combines:
  - **Attributes:** Characteristics or properties defined by the class.
  - **Methods:** Functions that define the object's behavior.


## Lesson Overview

- **Objective**: Learn fundamental OOP concepts using an Instagram-like User system.

- **Topics**:
  1. Basic Class and Instantiation
  2. Attributes and Methods
  3. Encapsulation
  4. Inheritance and Subclasses
  5. Polymorphism
  6. Special Methods (`__repr__`, `__call__`)
  7. Object Lifecycle (`__init__`, `__del__`, `__enter__`, `__exit__`)
  8. Iterables and Iterators

---

## 1. Basic Class and Instantiation
- A **class** is a blueprint for creating objects.
- An **object** is an instance of a class.

```python
class User:
    def __init__(self, username, bio):
        self.username = username
        self.bio = bio
        self.posts = []
        print(f"User {self.username} has been created.")
    
# Creating a user instance
user1 = User("adventure_lover", "Exploring the world one photo at a time 🌍")
# Output: User adventure_lover has been created.
```

---

## 2. Attributes and Methods
- **Attributes**: Data associated with an object.
- **Methods**: Functions defined inside a class that describe the behaviors of an object.

```python
class User:
    def __init__(self, username, bio):
        self.username = username
        self.bio = bio
        self.posts = []
    
    def create_post(self, image_url, caption):
        post = {"image_url": image_url, "caption": caption}
        self.posts.append(post)
        return f"{self.username} posted: {caption}"

# Creating a post
user1.create_post("http://example.com/photo.jpg", "Sunset at the beach 🌅")
```

---

## 3. Encapsulation
- **Encapsulation**: Restricts access to some of the object's components.
- Use **private attributes** to hide data.

```python
class User:
    def __init__(self, username, bio):
        self.username = username
        self.bio = bio
        self.__followers = []  # Private attribute
    
    def get_follower_count(self):
        return len(self.__followers)

# Accessing followers safely
print(user1.get_follower_count())  # Output: 0
```

---

## 4. Inheritance and Subclasses
- **Inheritance**: Allows one class to inherit attributes and methods from another.

```python
class Influencer(User):
    def __init__(self, username, bio, follower_threshold=1000):
        super().__init__(username, bio)
        self.follower_threshold = follower_threshold
    
    def is_influencer(self):
        return self.get_follower_count() >= self.follower_threshold

# Creating an Influencer instance
user2 = Influencer("travel_influencer", "Traveling the world 🌎")
```

---

## 5. Polymorphism
- **Polymorphism**: Allows methods to be used interchangeably between different classes.

```python
# Using polymorphism for different user interactions
def share_profile(user):
    return user.username + ": " + user.bio

users = [user1, user2]

for user in users:
    print(share_profile(user))
```

---

## 6. Special Methods (`__repr__`, `__call__`)
- **`__repr__`**: Provides a string representation of an object.
- **`__call__`**: Makes an instance callable.

```python
class User:
    def __init__(self, username, bio):
        self.username = username
        self.bio = bio
        self.posts = []

    def __repr__(self):
        return f"User(username='{self.username}', bio='{self.bio[:30]}...')"
    
    def __call__(self, image_url, caption):
        return self.create_post(image_url, caption)

# Using special methods
print(user1)  # Output: User(username='adventure_lover', bio='Exploring the world one pho...')
user1("http://example.com/photo.jpg", "A magical forest 🌲")
```

---

## 7. Object Lifecycle
- **`__init__`**: Initializes a new object.
- **`__del__`**: Called when an object is deleted.
- **`__enter__`** and **`__exit__`**: Used with `with` statements for context management.

```python
class User:
    def __init__(self, username, bio):
        self.username = username
        self.bio = bio
        print(f"User {self.username} has been created.")

    def __del__(self):
        print(f"User {self.username} is being deleted.")

    def __enter__(self):
        print(f"Entering context for user {self.username}.")
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        print(f"Exiting context for user {self.username}.")

# Object Lifecycle in action
with User("lifecycle_lover", "Learning about the object lifecycle") as user:
    user.create_post("http://example.com/life.jpg", "Learning object lifecycle!")
```

---

## 8. Iterables and Iterators
- **`__iter__`**: Makes an object iterable.
- Allows using `for` loops directly on objects.

```python
class User:
    def __init__(self, username, bio):
        self.username = username
        self.bio = bio
        self.posts = []
    
    def __iter__(self):
        return iter(self.posts)

# Iterating over user's posts
for post in user1:
    print(post)
```

---

## Lesson Summary
- **OOP Basics**: Classes, attributes, methods.
- **Advanced Concepts**: Encapsulation, inheritance, polymorphism, special methods, object lifecycle.
- **Next Steps**: Practice these concepts by building and modifying Python classes.
