# Encapsulation and Data Hiding Coding Session

## Overview

In this coding session, you will refactor the existing classes to implement encapsulation and data hiding principles. You'll also create a new `PrivateMessage` class to practice these concepts further.

## Step 1: Refactor the `User` Class

Update the `user.py` file:

1. Change all instance attributes to use a single underscore prefix (e.g., `self._username`).
2. Implement properties for `username` and `email` with appropriate getters and setters.
3. Create a `_validate_email` private method to check email format.
4. Update the `update_bio` method to use a property for `bio` with a setter that enforces the character limit.

## Step 2: Refactor the `Post` Class

Update the `post.py` file:

1. Change appropriate instance attributes to use a single underscore prefix.
2. Implement a property for `likes_count` with a getter only.
3. Make the `like_post` and `unlike_post` methods protected by adding a single underscore prefix.
4. Create a public `toggle_like` method that calls the protected methods as appropriate.

## Step 3: Refactor the `Comment` Class

Update the `comment.py` file:

1. Change appropriate instance attributes to use a single underscore prefix.
2. Implement a read-only property for `timestamp`.
3. Create a protected `_increment_likes` method and a public `like` method that calls it.

## Step 4: Create a `PrivateMessage` Class

Create a new file `private_message.py`:

1. Implement a `PrivateMessage` class with the following features:
   - Private attributes for sender, recipient, content, and timestamp.
   - A class attribute for keeping track of the total number of messages sent.
   - A static method to get the total message count.
   - Properties for accessing the private attributes (read-only for sender and recipient).
   - A method to display the message contents only if the provided user is either the sender or the recipient.

## Step 5: Update the `User` Class for Private Messages

In the `user.py` file:

1. Add a private attribute `_received_messages` initialized as an empty list.
2. Implement a method `send_private_message` that creates a new `PrivateMessage` and adds it to the recipient's `_received_messages`.
3. Create a method `view_private_messages` that returns a list of the user's received messages.
