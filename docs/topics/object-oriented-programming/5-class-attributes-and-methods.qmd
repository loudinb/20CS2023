# Class Attributes and Methods

## What are Class Attributes?

- Variables shared by all instances of a class
- Defined outside any method in the class
- Accessed using the class name or instance

```python
class Book:
    library_name = "City Library"  # Class attribute

    def __init__(self, title):
        self.title = title  # Instance attribute

print(Book.library_name)  # Accessing class attribute
```

::: {.notes}
Class attributes are shared by all instances of a class. They're defined at the class level, outside of any method. In this example, `library_name` is a class attribute that all `Book` instances will share. We can access it using the class name `Book.library_name`.
:::


## Accessing Class Attributes

- Best practice: Use class name (e.g., `Book.library_name`)
- Can also access through instance, but less clear

```python
book1 = Book("1984")
book2 = Book("To Kill a Mockingbird")

print(Book.library_name)  # Recommended
print(book1.library_name)  # Works, but less clear
```

::: {.notes}
We can access class attributes using either the class name or an instance. However, using the class name (like `Book.library_name`) is clearer because it shows that the attribute is shared by all instances. Accessing through an instance (`book1.library_name`) works but doesn't clearly show it's a shared attribute.
:::


## Modifying Class Attributes

- Changes affect all instances when modified through class
- Be careful when modifying through an instance

```python
Book.library_name = "City Central Library"
print(book1.library_name)  # "City Central Library"
print(book2.library_name)  # "City Central Library"

book1.library_name = "School Library"  # Creates instance attribute
print(Book.library_name)  # Still "City Central Library"
print(book2.library_name)  # Still "City Central Library"
```

::: {.notes}
When we modify a class attribute using the class name, it affects all instances. However, if we try to modify it through an instance, we actually create a new instance attribute with the same name, which doesn't affect other instances or the class attribute itself. This behavior can be confusing, so it's best to modify class attributes using the class name.
:::


## Class Attributes vs Instance Attributes

- Class attributes: Shared by all instances
- Instance attributes: Unique to each instance

```python
class Book:
    library_name = "City Library"  # Class attribute

    def __init__(self, title):
        self.title = title  # Instance attribute

book1 = Book("1984")
book2 = Book("To Kill a Mockingbird")

print(book1.title)  # "1984"
print(book2.title)  # "To Kill a Mockingbird"
print(book1.library_name)  # "City Library"
print(book2.library_name)  # "City Library"
```

::: {.notes}
This example shows the difference between class and instance attributes. `library_name` is a class attribute shared by all `Book` instances, while `title` is an instance attribute unique to each book. Understanding this difference is crucial for proper class design and usage.
:::


## What are Class Methods?

- Methods that operate on the class, not instances
- Defined using the `@classmethod` decorator
- First parameter is `cls` (the class itself)

```python
class Book:
    total_books = 0

    def __init__(self, title):
        self.title = title
        Book.total_books += 1

    @classmethod
    def display_total(cls):
        print(f"Total books: {cls.total_books}")
```

::: {.notes}
Class methods are methods that operate on the class itself, not on instances. They're defined using the `@classmethod` decorator and take `cls` as their first parameter, which represents the class. In this example, `display_total` is a class method that prints the total number of books created.
:::


## Using Class Methods

- Call class methods on the class itself
- Useful for operations involving class-level data

```python
Book.display_total()  # Total books: 0

book1 = Book("1984")
book2 = Book("To Kill a Mockingbird")

Book.display_total()  # Total books: 2
```

::: {.notes}
We can call class methods directly on the class, without needing an instance. This is useful for operations that involve class-level data or behavior. In this example, we use the `display_total` method to show the number of books created, which is tracked using a class attribute.
:::


## Class Methods as Alternative Constructors

- Provide different ways to create class instances
- Useful for creating objects from various data sources

```python
class Book:
    @classmethod
    def from_string(cls, book_info):
        title, author = book_info.split(', ')
        return cls(title, author)

book = Book.from_string("1984, George Orwell")
print(book.title)  # "1984"
print(book.author)  # "George Orwell"
```

::: {.notes}
Class methods can serve as alternative constructors, providing different ways to create instances of a class. This is useful when you want to create objects from different data sources or formats. In this example, `from_string` is a class method that creates a `Book` instance from a string containing the title and author.
:::


## Summary

- Class attributes: Shared by all instances
- Instance attributes: Unique to each instance
- Class methods: Operate on the class, not instances
- Use class name to access/modify class attributes
- Class methods as alternative constructors

::: {.notes}
To summarize, class attributes are shared among all instances of a class, while instance attributes are unique to each instance. Class methods operate on the class itself and are useful for class-wide operations or as alternative constructors. Remember to use the class name when accessing or modifying class attributes to avoid confusion. These concepts are fundamental to object-oriented programming in Python and provide powerful tools for designing flexible and efficient classes.
:::