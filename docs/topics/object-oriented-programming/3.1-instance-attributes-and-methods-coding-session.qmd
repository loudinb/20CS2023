# Coding Session: Instance Attributes and Methods


## Overview

In this coding session, we will enhance our `User` class by adding more instance attributes and methods. We'll focus on creating a more robust user profile system for our social media application.


## Step 1: Update the `User` Class

Open the `user.py` file and update the `User` class:

1. Add new instance attributes in the `__init__` method:
   - `email` (string)
   - `followers` (initialize as an empty list)
   - `following` (initialize as an empty list)

2. Update the `__init__` method signature to include the `email` parameter.


## Step 2: Add a Method to Follow Users

Add a new instance method called `follow`:

- Accept another `User` object as a parameter.
- Add the other user to this user's `following` list.
- Add this user to the other user's `followers` list.
- Return a string confirming the follow action.


## Step 3: Add a Method to Unfollow Users

Add a new instance method called `unfollow`:

- Accept another `User` object as a parameter.
- Remove the other user from this user's `following` list.
- Remove this user from the other user's `followers` list.
- Return a string confirming the unfollow action.


## Step 4: Add a Method to Display User Info

Create a method called `display_info`:

- Return a string containing the user's username, email, bio, number of posts, followers count, and following count.


## Step 5: Update the `create_post` Method

Modify the `create_post` method:

- Add a `likes` key to the post dictionary, initialized to 0.


## Step 6: Add a Method to Like Posts

Create a new method called `like_post`:

- Accept a `User` object and a post index as parameters.
- Increment the `likes` count for the specified post of the given user.
- Return a string confirming the like action.


## Step 7: Testing the New Functionality

Create a new Python file called `test_user.py`:

1. Import the `User` class from `user.py`.
2. Create several `User` instances.
3. Test the new methods:
   - Follow and unfollow users
   - Create posts
   - Like posts
   - Display user info

Print the results of these actions to verify the functionality.


## Conclusion

In this coding session, we've significantly expanded our `User` class with new instance attributes and methods. These additions allow for more complex interactions between users, enhancing the functionality of our social media application.

::: {.notes}
This coding session builds upon the previous one, introducing more complex instance attributes and methods. It encourages students to think about how different objects (users in this case) can interact with each other through method calls. The session also reinforces the concept of modifying object state through methods, a key aspect of working with instance attributes and methods.
:::