# Instance Attributes and Methods Coding Session

## Overview

In this coding session, you will expand the Instagram-like app by adding a new `Comment` class and enhancing the existing `User` and `Post` classes with more instance attributes and methods.

## Step 1: Create `comment.py` File

Create a new Python file named `comment.py`.

1. Open your preferred text editor or IDE.
2. Create a new file and save it as `comment.py` in your project directory.
3. Import the `datetime` module at the top of the file.

## Step 2: Implement the `Comment` Class

In `comment.py`, create a `Comment` class with the following features:

1. An `__init__` method that takes `user`, `post`, and `content` as parameters.
2. Instance attributes for `user`, `post`, `content`, `timestamp` (use `datetime.now()`), and `likes` (initialize to 0).
3. A `like(self)` method that increments the likes count.
4. A `display(self)` method that prints the comment's content, author, timestamp, and likes.

## Step 3: Update the `Post` Class

In `post.py`, update the `Post` class:

1. Import the `Comment` class from `comment.py`.
2. Add a `comments` attribute to the `__init__` method, initialized as an empty list.
3. Implement an `add_comment(self, user, content)` method that creates a new `Comment` instance and adds it to the `comments` list.
4. Update the `display(self)` method to show the number of comments and list all comments.

## Step 4: Enhance the `User` Class

In `user.py`, enhance the `User` class:

1. Add a `liked_posts` attribute to the `__init__` method, initialized as an empty set.
2. Implement a `like_post(self, post)` method that adds the post to `liked_posts` and calls the post's `like_post` method.
3. Add a `comment_on_post(self, post, content)` method that calls the post's `add_comment` method.
4. Implement a `get_activity_feed(self)` method that returns a list of the user's recent actions (posts created, posts liked, and comments made), sorted by timestamp.