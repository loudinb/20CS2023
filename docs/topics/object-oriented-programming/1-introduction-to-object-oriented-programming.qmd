# Introduction to Object-Oriented Programming


## What is Object-Oriented Programming?

- A programming approach that organizes code around objects
- Classes serve as blueprints for creating objects
- Objects are instances of classes, like houses built from blueprints.
- Objects contain data (attributes) and code (methods)

::: {.notes}
Object-Oriented Programming is a way of organizing our code that focuses on objects. These objects are like containers that hold both data (which we call attributes) and the code that operates on that data (which we call methods). In OOP, we use classes as templates or blueprints to create these objects. This approach helps us structure our code in a way that often matches how we think about things in the real world.

** Analogy: **

Think of a class as a blueprint for a house. The blueprint isn't a house itself, but it contains all the information needed to build a house. It specifies things like the layout, the number of rooms, where the doors and windows go, and so on.

An object, then, is like an actual house built from that blueprint. You can build many houses from the same blueprint, just like you can create many objects from the same class. Each house (or object) will have the same basic structure, but might have different specific details (like paint color, furniture, etc.).

This analogy helps us understand how classes serve as templates for creating objects, and how multiple objects can be created from the same class.
:::


## Programming Paradigms

- **Procedural Programming**: Step-by-step instructions
- **Functional Programming**: Functions to solve problems
- **Object-Oriented Programming**: Objects with data and methods

::: {.notes}
Before we dive deeper into OOP, let's briefly compare it to other programming paradigms:

1. Procedural Programming is like following a recipe. It's a step-by-step approach where you write a series of instructions for the computer to follow in order.

2. Functional Programming focuses on using functions to solve problems. It treats computation as the evaluation of mathematical functions and avoids changing state and mutable data.

3. Object-Oriented Programming, which we're focusing on, organizes code into objects that contain both data and the methods to manipulate that data.

Each paradigm has its strengths, and understanding them helps us choose the best approach for a given problem.
:::


## Core Concepts of OOP

- **Encapsulation**: Bundling data and methods
- **Inheritance**: Creating new classes from existing ones
- **Polymorphism**: Treating different objects as the same type
- **Abstraction**: Hiding complex details

::: {.notes}
OOP is built on four main concepts:

1. Encapsulation: This is about bundling data and the methods that work on that data within one unit or object. It's like putting related things in a box and controlling access to what's inside.

2. Inheritance: This allows us to create new classes based on existing ones. It's a way of reusing code and creating a hierarchy of classes.

3. Polymorphism: This concept allows objects of different types to be treated as objects of a common type. It's about designing interfaces that can work with different types of data.

4. Abstraction: This involves hiding complex implementation details and showing only the necessary features of an object. It's about creating a simplified view of an object.

We'll explore each of these concepts in more depth in future sessions.
:::


## Benefits of OOP

- Modularity
- Reusability
- Flexibility
- Maintainability

::: {.notes}
OOP offers several key benefits:

1. Modularity: OOP allows us to break our code into self-contained units (objects). This makes our code easier to understand and manage.

2. Reusability: Through inheritance, we can reuse code from existing classes when creating new ones. This saves time and reduces redundancy.

3. Flexibility: OOP makes it easier to extend and modify our code. We can add new objects without changing existing ones.

4. Maintainability: The structure of OOP makes it easier to identify and fix issues in our code. It also makes it easier for different programmers to work on the same project.

These benefits become especially apparent as our programs grow larger and more complex.
:::


## Learning OOP with a Project

Over the next few lectures we will implement elements of a simple Instagram-like app using OOP concepts.

::: {.notes}
To help solidify our understanding of OOP, we're going to work on a project throughout this course. We'll be building a simplified version of Instagram.

This project will give us a chance to apply the OOP concepts we learn in a practical, real-world context. We'll create classes for users, posts, and other features of the app. As we learn new OOP concepts, we'll use them to add functionality to our app.

This hands-on approach will help reinforce the concepts we discuss in lectures and give you practical experience in using OOP to build a real application.
:::