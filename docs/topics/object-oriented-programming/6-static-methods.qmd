# Static Methods

## What are Static Methods?

- Methods that don't operate on instance or class data
- Defined using the `@staticmethod` decorator
- Don't receive `self` or `cls` as first parameter

```python
class MathOperations:
    @staticmethod
    def add(x, y):
        return x + y

print(MathOperations.add(5, 3))  # Output: 8
```

::: {.notes}
Static methods are methods that don't need access to instance or class data. They're defined using the `@staticmethod` decorator and don't receive `self` or `cls` as their first parameter. They're essentially regular functions that are part of a class's namespace.
:::


## When to Use Static Methods

- For utility functions related to the class
- When you don't need access to instance or class data
- To organize code that belongs conceptually to the class

```python
class DateUtils:
    @staticmethod
    def is_valid_date(day, month, year):
        # Simple validation (real implementation would be more complex)
        return 1 <= day <= 31 and 1 <= month <= 12 and year > 0

print(DateUtils.is_valid_date(31, 12, 2023))  # Output: True
print(DateUtils.is_valid_date(31, 13, 2023))  # Output: False
```

::: {.notes}
Static methods are useful for utility functions that are related to the class but don't need to access instance or class data. They help organize code that conceptually belongs to the class but operates independently of its state.
:::


## Static Methods vs Class Methods

- Static methods don't receive implicit first argument
- Class methods receive `cls` as first argument
- Use static methods when you don't need class state

```python
class Example:
    count = 0

    @classmethod
    def increment_count(cls):
        cls.count += 1
        return cls.count

    @staticmethod
    def add(x, y):
        return x + y

print(Example.increment_count())  # Output: 1
print(Example.add(5, 3))          # Output: 8
```

::: {.notes}
The key difference is that static methods don't receive an implicit first argument, while class methods receive `cls`. Use static methods when you don't need to access or modify the class state. In this example, `increment_count` needs access to the class attribute `count`, so it's a class method, while `add` doesn't need any class or instance data, so it's a static method.
:::


## Calling Static Methods

- Can be called on the class or an instance
- Behavior is the same regardless of how it's called

```python
class StringUtils:
    @staticmethod
    def reverse_string(s):
        return s[::-1]

# Calling on the class
print(StringUtils.reverse_string("hello"))  # Output: olleh

# Calling on an instance
utils = StringUtils()
print(utils.reverse_string("world"))  # Output: dlrow
```

::: {.notes}
Static methods can be called on either the class itself or an instance of the class. The behavior is the same in both cases because static methods don't depend on instance or class state. This flexibility can be convenient, but it's generally clearer to call static methods on the class.
:::


## Summary

- Static methods: Don't operate on instance or class data
- Use `@staticmethod` decorator
- Useful for utility functions related to the class
- Don't receive `self` or `cls` as first parameter
- Can be called on class or instance

::: {.notes}
Static methods are tools for organizing utility functions within a class's namespace. They don't operate on instance or class data, making them useful for operations that are conceptually related to a class but don't need access to its state. Remember to use the `@staticmethod` decorator when defining them, and consider whether a function truly needs to be a static method or if it could be a standalone function or a class method instead.
:::