# Objects

## What are Objects?

- Instances of a class
- Represent specific realizations of the class blueprint
- Characterized by:
  1. State (attributes)
  2. Behavior (methods)
  3. Identity (unique identifier)

:::{.notes}
Objects are the core concept in Object-Oriented Programming (OOP). They are instances of classes, representing specific realizations of the class blueprint. To understand objects, it's crucial to grasp these three key characteristics:

1. State: This is represented by the object's attributes. Attributes are variables that store data specific to each object. For example, a User object might have attributes like 'username', 'email', or 'number_of_posts'.

2. Behavior: This is defined by the object's methods. Methods are functions that belong to the class and define how objects can interact or respond. For instance, a User object might have methods like 'create_post()' or 'follow_user()'.

3. Identity: Each object has a unique identifier in memory. This allows the program to distinguish between different objects, even if they have the same attribute values.

An analogy might help: If a class is like a blueprint for a house, an object is like an actual house built from that blueprint. The house's features (number of rooms, color) are its state, what you can do in the house (cook, sleep) is its behavior, and its address is its identity.
:::

---

## Creating Objects (Instantiation)

- Process of creating an object is called instantiation
- Uses the class constructor (`__init__` method)
- Each instance has its own unique set of attribute values
- All instances share the same methods defined by the class

```python
class User:

    def __init__(self, username, bio):
        self.username = username         # Initialize username
        self.bio = bio                   # Initialize bio
        self.posts = []                  # Initialize posts as an empty list
        self.join_date = datetime.now()  # Initialize join_date to the current date and time

# Instantiation
user = User("bangbangnyc", "tattoo artist to the stars üåç")
```

:::{.notes}
Creating an object from a class is called instantiation. This process involves several key points:

1. Constructor: In Python, the `__init__` method serves as the constructor. It's automatically called when an object is created and is used to initialize the object's attributes.

2. Unique State: Each instance has its own set of attribute values. In our example, user1 and user2 have different usernames and emails.

3. Shared Behavior: All instances of a class share the same methods. If we added a method like `create_post()` to the User class, both user1 and user2 would have access to this method.

4. Instance Variables vs. Class Variables:
   - Instance variables (e.g., self.username) are specific to each object.
   - Class variables, defined outside any method, are shared across all instances.

5. The 'self' Parameter: In methods, 'self' refers to the instance the method is called on. It's how an object keeps track of its own data.

:::