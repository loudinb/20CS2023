# Errors

## Types of Errors {.hide}

Errors in Python programming can be broadly categorized as:

-   **Syntax errors**: Detected during the parsing stage, preventing the code from running until they are corrected.
-   **Logical errors**: The code runs without crashing but produces incorrect results due to flaws in logic or incorrect implementation of algorithms.
-   **Runtime errors**: Occur while the program is executing and disrupt its normal flow. These generate exceptions that can be caught and handled.

## Syntax Errors {.hide}

:::: smaller-80
**Syntax errors** occur when the code is not correctly structured according to Python's grammar rules. The program will not run if it contains syntax errors.

``` python
# Missing colon (:) here
if condition

# Incorrect indentation
def function(): 
print("Incorrect indentation")

# Missing closing parenthesis
print((2 + 3  
```

::: callout-note
Static type checkers like `mypy` catch type-related issues to ensure consistency and prevent certain runtime errors, but they do not catch syntax errors. Linting tools like `pylint` identify style issues and some syntax mistakes, but they are not as comprehensive as an interpreter in detecting all syntax errors. Many IDE's have integrated error checking.
:::
::::

::: notes
This includes incorrect use of keywords, indentation, punctuation, or any other violation of Python's syntax. The Python interpreter must successfully parse the entire program before execution begins. If there are syntax errors at any point, including within nested code blocks, the interpreter will stop parsing and report the error. Thus, the program will not run until all syntax errors are corrected, regardless of how deeply nested the problematic code might be.
:::

## Logical Errors {.hide}

:::: smaller-80
**Logical errors** are difficult to detect because the program runs without crashing but produces incorrect results due to flawed logic or improper implementation.

-   **Faulty logic**: Incorrect reasoning or an unsuitable approach to solving the problem.
-   **Faulty implementation**: The logic is correct, but it is coded incorrectly.
-   **Combination of both**: A mix of flawed concepts and coding mistakes.

::: callout-note
To effectively handle logical errors: follow the Single Responsibility Principle, write modular code, and test each component thoroughly, including full coverage and edge cases.
:::
::::

## Runtime Errors {.hide}

:::: smaller-80
**Runtime errors** (exceptions) occur during program execution and can halt the program if not handled. Common Python runtime errors include:

-   **ZeroDivisionError**: Dividing by zero
-   **ValueError**: Function receives an inappropriate value (e.g., converting non-numeric string to integer)
-   **FileNotFoundError**: Attempting to open a non-existent file
-   **MemoryError**: Program runs out of memory
-   **KeyError**: Accessing a non-existent dictionary key
-   **TypeError**: Performing invalid operations between incompatible types

::: callout-note
Runtime errors can be handled using Python's exception handling mechanism, which allows you to catch and manage exceptions gracefully.
:::
::::