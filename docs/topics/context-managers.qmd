# Context Managers

Context managers allow for the proper acquisition and release of resources, such as file handling, by ensuring resources are properly cleaned up (e.g., closing a file after use). 

## The `with` Statement

The `with` statement is a Pythonic way to handle resources effectively.

**Example**:
```python
with open('example.txt', 'w') as f:
    f.write('Hello, World!')
# File is automatically closed after this block
```

For custom context managers, you can use the `contextlib` library:

```python
from contextlib import contextmanager

@contextmanager
def file_manager(filename, mode):
    file = open(filename, mode)
    try:
        yield file
    finally:
        file.close()

with file_manager('example.txt', 'w') as f:
    f.write('Hello, World!')
```
