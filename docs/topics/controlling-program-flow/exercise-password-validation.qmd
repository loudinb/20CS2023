---
---

# Password Validation Exercise

::: {.notes}
Create a function that takes a password as input and checks if it meets the criteria.
:::

## {data-menu-title="Requirements"}

Create a function called `validate_password` that takes a password as input and checks if it meets the following criteria:

- Is at least 8 characters long
- Contains at least one uppercase letter (`string.ascii_uppercase`)
- Contains at least one lowercase letter (`string.ascii_lowercase`)
- Contains at least one digit (`string.digits`)
- Contains at least one special character from the set: `!@#$%^&*()_+-=[]{}|;:,.<>?`

## {data-menu-title="Prototype"}

::: {.smaller-90}
```python
import string

def validate_password(password):
    """
    Validates a password based on the following criteria:
    1. At least 8 characters long
    2. Contains at least one uppercase letter
    3. Contains at least one lowercase letter
    4. Contains at least one digit
    5. Contains at least one special character from the set: !@#$%^&*()_+-=[]{}|;:,.<>?

    Args:
      password (str): The password to validate

    Returns:
      bool: True if the password meets all criteria, False otherwise
    """
    # TODO: Implement password validation logic here
    pass
```
:::

::: {.notes}
Here is a **prototype** - a bare-bones implementation that includes the function signature, docstring - but without the implementation details.
:::

## {data-menu-title="Roadmap"}

::: {.smaller-90}
```python
import string

def validate_password(password):
    """
    Validates a password based on the following criteria:
    1. At least 8 characters long
    2. Contains at least one uppercase letter
    3. Contains at least one lowercase letter
    4. Contains at least one digit
    5. Contains at least one special character from the set: !@#$%^&*()_+-=[]{}|;:,.<>?

    Args:
      password (str): The password to validate

    Returns:
      bool: True if the password meets all criteria, False otherwise
    """
    # TODO: Check password length
    # if ...:
    #     return False

    # TODO: Initialize flag variables for each criterion
    # has_uppercase = ...
    # has_lowercase = ...
    # has_digit = ...
    # has_special = ...

    # TODO: Define the set of special characters
    # special_chars = ...

    # TODO: Iterate through each character in the password
    # for char in password:
    #     # TODO: Check if the character meets each criterion
    #     # if ...:
    #     #     has_uppercase = ...
    #     # elif ...:
    #     #     has_lowercase = ...
    #     # ...

    # TODO: Return the result using logical operators to combine all criteria
    # return ...
```
:::

::: {.notes}
Here is a **roadmap** - a more detailed outline of the implementation steps without giving away the full solution.
::::