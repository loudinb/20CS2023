---
---

# Logical Comparisons

::: {.notes}
**Logical Comparisons**

Comparison and logical operators allow us to create sophisticated decision-making structures in our code.

- evaluate relationships between values
- guide program flow based
:::


## {data-menu-title="Comparison Operators"}

::: {.smaller-90}
| Operator | Description | Example |
|----------|-------------|---------|
| `==` | Equal to | `5 == 5` returns `True` |
| `!=` | Not equal to | `5 != 3` returns `True` |
| `>` | Greater than | `7 > 3` returns `True` |
| `<` | Less than | `2 < 8` returns `True` |
| `>=` | Greater than or equal to | `5 >= 5` returns `True` |
| `<=` | Less than or equal to | `4 <= 4` returns `True` |

: **Comparison Operators** {tbl-colwidths="[15,30,55]"}
:::

::: {.notes}
**Comparison Operators**

Comparison operators in Python return a Boolean value (`True` or `False`) based on the relationship between two operands.
:::


## {data-menu-title="Comparing Objects of Differing Types"}

What happens when we compare objects of different type?

```python
print(5 == 5.0)
print("5" == 5)
print("apple" < "banana")
print([1, 2, 3] == [1, 2])
```

::: {.notes}
**Comparing Objects of Differing Types**

- Implicit type conversion (type promotion) occurs when comparison operators are used to compare values of different data types. 
- Example, when comparing an integer and a float, Python will convert the integer to a float before making the comparison. 
- This process **is not full type coercion** it is limited to certain types (e.g., numbers),
- Automatic type promotion across incompatible types does not occur, such as strings and integers.
:::


## {data-menu-title="Logical Operators"}

::: {.smaller-90}
| Operator | Description | Example |
|----------|-------------|---------|
| `and` | Returns `True` if both operands are true | `(5 > 3) and (10 < 20)` returns `True` |
| `or` | Returns `True` if at least one operand is true | `(5 < 3) or (10 < 20)` returns `True` |
| `not` | Negates the operand, returning the opposite Boolean value | `not (5 > 10)` returns `True` |

: **Logical Operators** {tbl-colwidths="[15,43,42]"}
:::

::: {.notes}
**Logical Operators**

Logical operators are used to combine multiple conditions or values and return a single Boolean value.
:::


## {data-menu-title="Comparison Chaining"}

We can chain comparisons together, the general syntax is:

::: {.smaller-80}
`result = val1 op1 val2 op2 val3 ... valN opN`
:::

```python
# compound comparison
(1 < 2) and (2 < 3)

# chained comparisons
1 < 2 < 3

x = 10
5 < x < 15  # Equivalent to (5 < x) and (x < 15)

not 5 < x < 15
```

::: {.notes}
**Comparison Chaining**

Logical conditions can be expressed through "chained comparison" or "comparison chaining." 

- In a chained comparison, the result of one comparison is used as an operand in the next comparison. 
- Chained comparisons are implicitly joined by `and`
- The `not` operator can be used, but it affects the entire chained comparison, not individual parts.
:::


## {data-menu-title="Truthiness"}

Here is what's `False`.....

:::: {.columns}

::: {.column width="50%"}
- `False`
- `None`
- `0` (integer)
- `0.0` (float)
- `0j` (complex number)
:::

::: {.column width="50%"}
- `''` (empty string)
- `[]` (empty list)
- `{}` (empty dictionary)
- `()` (empty tuple)
- `set()` (empty set)
:::

::::

If it's not `False` its **`True`**.


::: {.notes}

- Truthiness is a concept that determines whether a value is considered `True` (Boolean context)  
- Every value in Python has an associated truth value.
:::

## Short-Circuit Evaluation

- Stops evaluation when result is known
- Optimizes logical expressions improving efficiency
- Examples:
  - `A and B`: If A is False, B is not evaluated
  - `A or B`: If A is True, B is not evaluated


::: {.notes}
- Short-circuit evaluation is a technique used in programming to optimize logical expressions. 
- The evaluation of a logical expression stops as soon as the result is determined. 
:::