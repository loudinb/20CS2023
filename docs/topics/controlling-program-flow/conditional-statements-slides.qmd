# Conditional Statements
Conditional statements allow you to execute different blocks of code based on whether a condition is true or false.

::: {.notes}
**Conditional Statements**

Conditional statements are a fundamental concept in programming that allow you to control the flow of your code based on certain conditions. In Python, the primary conditional statement is the `if` statement.
:::


## `if` Statement {.hide}

The basic syntax of the `if` statement:

::: {.absolute width="80%"}
```python
if condition:
    # code block
```
:::

::: {.notes}
**`if` Statement**

- The most basic form of a conditional statement. 
- Used to evaluate a condition and execute a block of code if the condition is `True`. 
- General syntax:

```python
if condition:
    # code block
```
:::


### `if` Example {.hide}

The `if` statement:

::: {.r-stack}

::: {.absolute width="80%"}
```python
age = 18
if age >= 18:
    print("You are eligible to vote.")
```
:::

::: {.fragment .absolute width="80%"}
```python
age = 18
if age >= 18:
    print("You are eligible to vote.")

# Output: You are eligible to vote.
```
:::

:::

::: {.notes}
:::


## `if-else` Statement {.hide}

The basic syntax of the `if-else` statement:

::: {.absolute width="80%"}
```python
if condition:
    # code block 1
else:
    # code block 2
```
:::

::: {.notes}
**`if-else` Statement**

- The `if-else` statement is an extension of the `if` statement
- allows you to execute one block of code if the condition is `True` and another block of code if the condition is `False`. 
- The general syntax of an `if-else` statement is as follows:

```python
if condition:
    # code block 1
else:
    # code block 2
```
:::


### `if-else` Example {.hide}

The `if-else` statement:

::: {.r-stack}

::: {.absolute width="80%"}
```python
temperature = 25
if temperature > 30:
    print("It's hot outside!")
else:
    print("The weather is pleasant.")
```
:::

::: {.fragment .absolute width="80%"}
```python
temperature = 25
if temperature > 30:
    print("It's hot outside!")
else:
    print("The weather is pleasant.")

# Output: The weather is pleasant.
```
:::

:::

::: {.notes}
:::



## `if-elif-else` Statement {.hide}

The basic syntax of the `if-elif-else` statement:


::: {.absolute width="90%"}
```python
if condition1:
    # code block 1
elif condition2:
    # code block 2
else:
    # code block 3
```
:::


::: {.notes}
**`if-elif-else` Statement**

- an extension of the `if-else` statement that allows you to evaluate multiple conditions. 
- `elif` keyword is short for "else if" and is used to check additional conditions if the previous conditions are `False`.
- You can have multiple `elif` blocks to check as many conditions as needed.
- The `else` block is optional and will execute if none of the conditions are `True`.
- The general syntax:

```python
if condition1:
    # code block 1
elif condition2:
    # code block 2
else:
    # code block 3
```
:::


### `if-elif-else` Example {.hide}

The `if-elif-else` statement:

::: {.r-stack}

::: {.absolute width="90%"}
```python
score = 85
if score >= 90:
    print("A")
elif score >= 80:
    print("B")
elif score >= 70:
    print("C")
else:
    print("D")
```
:::

::: {.fragment .absolute width="90%"}
```python
score = 85
if score >= 90:  # False
    print("A")
elif score >= 80:
    print("B")
elif score >= 70:
    print("C")
else:
    print("D")
```
:::

::: {.fragment .absolute width="90%"}
```python
score = 85
if score >= 90:  # False
    print("A")
elif score >= 80: # True
    print("B")
elif score >= 70:
    print("C")
else:
    print("D")
```
:::

::: {.fragment .absolute width="90%"}
```python
score = 85
if score >= 90:  # False
    print("A")
elif score >= 80: # True
    print("B")    # Executes code, exits if-elif-else statement
elif score >= 70:
    print("C")
else:
    print("D")
```
:::

::: {.fragment .absolute width="80%"}
```python
score = 85
if score >= 90:  # False
    print("A")
elif score >= 80: # True
    print("B")    # Executes code, exits if-elif-else statement
elif score >= 70:
    print("C")
else:
    print("D")

# Output: B
```
:::

:::

::: {.notes}
:::


## Nested Comparisons {.hide}

Nested comparisons:

```python
if condition1:
    if condition2:
        # code block 1
    else:
        # code block 2
else:
    # code block 3
```

::: {.callout-important}
Excessive nesting of conditional statements can reduce code readability and maintainability. To simplify complex logic, consider using functions, or alternative control structures like elif, switch, or early returns.
:::

::: {.notes}
**Nested Comparisons**

To create more complex decision-making structures
- You can nest conditional statements within other conditional statements.
- Allows you to check multiple conditions in sequence or in combination.
:::


## `match-case` Statement {.hide}

The match case statement was introduced in Python 3.10. It provides a more concise and readable way to write conditional statements.  It is similar to the switch statement in other programming languages.

General syntax of a `match-case` statement:

```python
match value:
    case pattern1:
        # code block 1
    case pattern2:
        # code block 2
    case _:
        # default code block
```

::: {.callout-note}
The `_` acts as a wildcard or catch-all, matching any value that does not match the previous patterns.
:::

::: {.notes}
**Match Case Statement**

- provides a more concise and readable way to write conditional statements
- allows you to match a value against multiple patterns and execute different code blocks based on the matched pattern. 
- The `match-case` statement can be used to replace complex `if-elif-else` chains.

The general syntax of a `match-case` statement is as follows:

```python
match value:
    case pattern1:
        # code block 1
    case pattern2:
        # code block 2
    case _:
        # default code block
```
:::


### `match-case` Example {.hide}

The `match-case` statement:

::: {.r-stack}

::: {.absolute width="90%"}
```python
score = 85

match score:
    case score if score >= 90:
        print("A")
    case score if score >= 80:
        print("B")
    case score if score >= 70:
        print("C")
    case _:
        print("D")
```
:::

::: {.fragment .absolute width="90%"}
```python
score = 85

match score:
    case score if score >= 90:
        print("A")
    case score if score >= 80: # True
        print("B")
    case score if score >= 70:
        print("C")
    case _:
        print("D")

# Output: B
```
:::

:::