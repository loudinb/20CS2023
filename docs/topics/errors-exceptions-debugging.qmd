# Errors, Exceptions, and Debugging in Python

## Errors

### Types of Errors {.hide}

Errors in Python programming can be broadly categorized as:

- **Syntax errors**: Detected during the parsing stage, preventing the code from running until they are corrected.
- **Logical errors**: The code runs without crashing but produces incorrect results due to flaws in logic or incorrect implementation of algorithms.
- **Runtime errors**: Occur while the program is executing and disrupt its normal flow. These generate exceptions that can be caught and handled.

### Syntax Errors {.hide}

::: {.smaller-80}

**Syntax errors** occur when the code is not correctly structured according to Python's grammar rules. The program will not run if it contains syntax errors.

```python
# Missing colon (:) here
if condition

# Incorrect indentation
def function(): 
print("Incorrect indentation")

# Missing closing parenthesis
print((2 + 3  
```

::: {.callout-note}
Static type checkers like mypy catch type-related issues to ensure consistency and prevent certain runtime errors, but they do not catch syntax errors. Linting tools like Pylint identify style issues and some syntax mistakes, but they are not as comprehensive as an interpreter in detecting all syntax errors. Many IDE's have integrated error checking.
:::

:::

::: {.notes}
This includes incorrect use of keywords, indentation, punctuation, or any other violation of Python's syntax. The Python interpreter must successfully parse the entire program before execution begins. If there are syntax errors at any point, including within nested code blocks, the interpreter will stop parsing and report the error. Thus, the program will not run until all syntax errors are corrected, regardless of how deeply nested the problematic code might be.
:::

### Logical Errors {.hide}

::: {.smaller-80}

**Logical errors** are difficult to detect because the program runs without crashing but produces incorrect results due to flawed logic or improper implementation.

- **Faulty logic**: Incorrect reasoning or an unsuitable approach to solving the problem.
- **Faulty implementation**: The logic is correct, but it is coded incorrectly.
- **Combination of both**: A mix of flawed concepts and coding mistakes.

::: {.callout-note}
To effectively handle logical errors: follow the Single Responsibility Principle, write modular code, and test each component thoroughly, including full coverage and edge cases.
:::

:::

### Runtime Errors {.hide}

::: {.smaller-80}

**Runtime errors** (exceptions) occur during program execution and can halt the program if not handled. Common Python runtime errors include:

- **ZeroDivisionError**: Dividing by zero
- **ValueError**: Function receives an inappropriate value (e.g., converting non-numeric string to integer)
- **FileNotFoundError**: Attempting to open a non-existent file
- **MemoryError**: Program runs out of memory
- **KeyError**: Accessing a non-existent dictionary key
- **TypeError**: Performing invalid operations between incompatible types


::: {.callout-note}
Runtime errors can be handled using Python's exception handling mechanism, which allows you to catch and manage exceptions gracefully.
:::

:::


## Exceptions {.hide}

::: {.smaller-80}

**Exceptions** are runtime errors that interrupt the normal flow of a program. Unhandled exceptions will cause the program to terminate.  Handling exceptions allows a program to continue running or exit gracefully. Python's exception handling mechanism is the `try`/`except` model.

- **`try` block**: Contains the code that might raise an exception.
- **`except` block**: Contains the code to handle the exception if one occurs. You can specify the type of exception to handle it specifically.
- **`else` block** (_optional_): Executes if no exception was raised in the `try` block.
- **`finally` block** (_optional_): Always executes after the `try` and `except` blocks, regardless of whether an exception occurred. Useful for cleanup operations.

:::

### `try`/`except` Syntax


```python
try:
    # Code that may raise an exception
    result = 10 / 0
except ZeroDivisionError:
    # Handling a specific exception
    print("Cannot divide by zero!")
else:
    # Executes if no exceptions were raised
    print("Division successful:", result)
finally:
    # Executes no matter what
    print("Execution complete.")
```


### Catching Exceptions

Python's `try`, `except`, `else`, and `finally` blocks allow you to catch and handle exceptions.

**Example**:
```python
def safe_divide(a, b):
    try:
        result = a / b
    except ZeroDivisionError:
        print("Cannot divide by zero")
        return None
    else:
        print("Division successful")
        return result
    finally:
        print("Division operation completed")

print(safe_divide(10, 2))  # Correct division
print(safe_divide(10, 0))  # Division by zero
```

### Catching Multiple Exceptions

You can handle multiple exceptions by adding multiple `except` blocks or grouping related exceptions in a single block.

**Example**:
```python
def process_data(data):
    try:
        value = int(data)
        result = 100 / value
    except ValueError:
        print("Invalid data: cannot convert to integer")
    except ZeroDivisionError:
        print("Invalid data: cannot divide by zero")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")
    else:
        print(f"Result: {result}")

process_data("10")
process_data("0")
process_data("abc")
```



### Raising Exceptions

You can manually raise exceptions in your program using the `raise` keyword. This is helpful when you want to enforce certain constraints or handle exceptional cases in a controlled way.

**Example**:
```python
def validate_age(age):
    if age < 0:
        raise ValueError("Age cannot be negative")
    return age

try:
    validate_age(-5)
except ValueError as e:
    print(f"Validation error: {e}")
```


### User-Defined Exceptions

You can create custom exceptions by subclassing the `Exception` class. This allows you to define more specific exceptions tailored to your program's needs.

**Example**:
```python
class InsufficientFundsError(Exception):
    def __init__(self, balance, amount):
        self.balance = balance
        self.amount = amount
        super().__init__(f"Insufficient funds: balance {balance}, required {amount}")

def withdraw(balance, amount):
    if balance < amount:
        raise InsufficientFundsError(balance, amount)
    return balance - amount

try:
    withdraw(100, 150)
except InsufficientFundsError as e:
    print(f"Transaction failed: {e}")
```

### Context Managers - The `with` Statement

Context managers allow for the proper acquisition and release of resources, such as file handling, by ensuring resources are properly cleaned up (e.g., closing a file after use). The `with` statement is a Pythonic way to handle resources effectively.

**Example**:
```python
with open('example.txt', 'w') as f:
    f.write('Hello, World!')
# File is automatically closed after this block
```

For custom context managers, you can use the `contextlib` library:

```python
from contextlib import contextmanager

@contextmanager
def file_manager(filename, mode):
    file = open(filename, mode)
    try:
        yield file
    finally:
        file.close()

with file_manager('example.txt', 'w') as f:
    f.write('Hello, World!')
```



## Debugging

### Understanding the Stack

When an exception occurs, Python generates a **traceback** showing the call stack, which helps you trace where the error occurred in your code.

**Example**:
```python
def foo():
    return bar()

def bar():
    return baz()

def baz():
    raise ValueError("Something went wrong")

try:
    foo()
except ValueError as e:
    import traceback
    print("Traceback:")
    print(traceback.format_exc())
```

This traceback gives you details about which functions were called and where the error originated.

### Using the Python Debugger (pdb)

Python’s built-in debugger, `pdb`, is a powerful tool for interactively stepping through code, inspecting variables, and diagnosing issues.

**Example**:
```python
import pdb

def complex_function(x, y):
    result = x + y
    pdb.set_trace()  # Pauses execution here and opens the debugger
    return result * 2

complex_function(3, 4)
```

Key `pdb` commands:
- `n`: Execute the next line of code.
- `s`: Step into a function call.
- `p`: Print the value of a variable.
- `c`: Continue execution until the next breakpoint.

### Logging for Debugging

The `logging` module allows you to record and track the behavior of your program at different logging levels, which is often more scalable than using `print` statements.

**Example**:
```python
import logging

logging.basicConfig(level=logging.DEBUG)

def calculate_average(numbers):
    logging.debug(f"Calculating average of {numbers}")
    if not numbers:
        logging.warning("Empty list provided")
        return 0
    return sum(numbers) / len(numbers)

print(calculate_average([1, 2, 3, 4, 5]))
print(calculate_average([]))
```



## Best Practices

### Be Specific in Catching Exceptions

It’s important to catch only the exceptions that you expect and know how to handle. Catching broad exceptions or using a bare `except` clause can mask unexpected errors, making debugging more difficult and possibly hiding bugs.

**Bad** (Bare `except` clause):
```python
try:
    # risky_function()
    pass
except:
    pass  # Silently ignores all errors
```

**Good** (Catching specific exceptions):
```python
try:
    value = int(input("Enter a number: "))
    result = 10 / value
except (ValueError, ZeroDivisionError) as e:
    print(f"Invalid input: {e}")
```

**Explanation**:
- Avoid catching all exceptions with a bare `except` clause. This can mask other issues in the code, making it difficult to identify the root cause of errors.
- Instead, catch specific exceptions like `ValueError`, `ZeroDivisionError`, or others that you can properly handle.

### Use the `else` Clause

The `else` clause in a `try` block executes only if no exceptions are raised. It helps to separate the error-handling logic from the normal execution flow.

**Example**:
```python
def perform_calculation(x, y):
    return x / y

try:
    result = perform_calculation(10, 2)
except ZeroDivisionError:
    print("Cannot divide by zero")
else:
    print(f"Calculation successful. Result: {result}")
finally:
    print("Calculation attempt completed")
```

### Raise Exceptions at the Appropriate Level

If a function cannot handle an exception, raise it at an appropriate level so that the calling function can handle it.

**Example**:
```python
class DatabaseError(Exception):
    pass

def query_database():
    try:
        raise ConnectionError("Connection failed")
    except (ConnectionError, TimeoutError) as e:
        raise DatabaseError("Database operation failed") from e

try:
    query_database()
except DatabaseError as e:
    print(f"Database error: {e}")
    print(f"Original error: {e.__cause__}")
```

## Summary

- Exception handling is critical for building robust Python applications.
- Use `try/except` blocks to handle exceptions, and only catch specific exceptions.
- Create custom exceptions for clearer and more specific error reporting.
- Use context managers (`with` statements) to manage resources.
- Employ debugging tools like `pdb` and logging to troubleshoot issues efficiently.
- Follow best practices to write clean, maintainable, and