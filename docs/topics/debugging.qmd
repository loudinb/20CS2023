# Debugging

## Understanding the Stack

When an exception occurs, Python generates a **traceback** showing the call stack, which helps you trace where the error occurred in your code.

**Example**:
```python
def foo():
    return bar()

def bar():
    return baz()

def baz():
    raise ValueError("Something went wrong")

try:
    foo()
except ValueError as e:
    import traceback
    print("Traceback:")
    print(traceback.format_exc())
```

This traceback gives you details about which functions were called and where the error originated.

## Using the Python Debugger (pdb)

Pythonâ€™s built-in debugger, `pdb`, is a powerful tool for interactively stepping through code, inspecting variables, and diagnosing issues.

**Example**:
```python
import pdb

def complex_function(x, y):
    result = x + y
    pdb.set_trace()  # Pauses execution here and opens the debugger
    return result * 2

complex_function(3, 4)
```

Key `pdb` commands:
- `n`: Execute the next line of code.
- `s`: Step into a function call.
- `p`: Print the value of a variable.
- `c`: Continue execution until the next breakpoint.

## Logging for Debugging

The `logging` module allows you to record and track the behavior of your program at different logging levels, which is often more scalable than using `print` statements.

**Example**:
```python
import logging

logging.basicConfig(level=logging.DEBUG)

def calculate_average(numbers):
    logging.debug(f"Calculating average of {numbers}")
    if not numbers:
        logging.warning("Empty list provided")
        return 0
    return sum(numbers) / len(numbers)

print(calculate_average([1, 2, 3, 4, 5]))
print(calculate_average([]))
```





## Summary

- Exception handling is critical for building robust Python applications.
- Use `try/except` blocks to handle exceptions, and only catch specific exceptions.
- Create custom exceptions for clearer and more specific error reporting.
- Use context managers (`with` statements) to manage resources.
- Employ debugging tools like `pdb` and logging to troubleshoot issues efficiently.
- Follow best practices to write clean, maintainable, and