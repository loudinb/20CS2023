### Question 181 {.question}

What error does this return?

```python
def define_local(number):
    local_variable = 7
    return local_variable

print(local_variable)
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `SyntaxError`
- [ ] `NameError`
- [ ] `TypeError`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `SyntaxError`
- [x] `NameError`
- [ ] `TypeError`


::: {.explanation}
A `NameError` occurs because `local_variable` is defined inside the function and is not accessible outside its scope.
:::
:::
:::

### Question 182 {.question}

Which of the following are limitations of static methods? (Select all that apply)

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] They don’t have access to `self` and `cls`
- [ ] Race conditions are of primary concern
- [ ] They are detrimental to namespace organization
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] They don’t have access to `self` and `cls`
- [ ] Race conditions are of primary concern
- [ ] They are detrimental to namespace organization


::: {.explanation}
Static methods have the limitation of not being able to access `self` (instance data) or `cls` (class data), but they are not typically related to race conditions or namespace organization.
:::
:::
:::

### Question 183 {.question}

The below code checks if `x` is ________.

```python
x % 2 == 0
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Odd
- [ ] Even
- [ ] Prime
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] Odd
- [x] Even
- [ ] Prime


::: {.explanation}
The code `x % 2 == 0` checks if a number `x` is divisible by 2, which means it is even.
:::
:::
:::

### Question 184 {.question}

What is the result of the following code?

```python
numbers = [1, 2, 3, 4, 5]
del numbers[1:4]
print(numbers)
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `[1, 2, 3, 4, 5]`
- [ ] `[1, 4, 5]`
- [ ] `[1, 5]`
- [ ] `[]`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `[1, 2, 3, 4, 5]`
- [ ] `[1, 4, 5]`
- [x] `[1, 5]`
- [ ] `[]`


::: {.explanation}
The `del` statement removes the elements from index 1 to 3 (excluding index 4), so `numbers` becomes `[1, 5]`.
:::
:::
:::

### Question 185 {.question}

Testing and debugging are mutually exclusive
::: {.r-stack}
::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::
::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] True
- [x] False
::: {.explanation}
This statement is false. Testing and debugging are complementary processes in software development. Testing helps identify the presence of bugs, while debugging helps locate and fix those bugs. They often work hand in hand in the development process.
:::
:::
:::

### Question 186 {.question}

The `zip()` function takes two or more lists and merges them. The return type of the function is what?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] list
- [ ] tuple
- [ ] set
- [ ] zip object
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] list
- [ ] tuple
- [ ] set
- [x] zip object


::: {.explanation}
The `zip()` function returns an iterator of tuples, which is a `zip` object. It can be converted to other types like lists if needed.
:::
:::
:::

### Question 187 {.question}

Instead of making print statements to debug your code, we should use what Python module to monitor the status of your program?

::: {.r-stack}
::: {.absolute .left-0 .top-0 width=100%}
Answer: 
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
Answer: `logging`

::: {.explanation}
The `logging` module in Python is a more robust and flexible way to monitor the status of your program compared to using print statements. It allows for different levels of logging, can write to files, and can be configured to provide more detailed information.
:::
:::
:::

### Question 188 {.question}

Static methods can access or modify class state.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] True
- [x] False


::: {.explanation}
Static methods cannot access or modify class or instance state since they do not take `self` or `cls` as arguments.
:::
:::
:::

### Question 189 {.question}

Sets in Python can contain all kinds of immutable objects (numeric objects, strings, and Booleans).

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] True
- [ ] False


::: {.explanation}
Sets in Python can contain immutable objects such as numbers, strings, and Booleans. However, they cannot contain mutable objects like lists.
:::
:::
:::

### Question 190 {.question}

What function creates a new object and recursively inserts copies into it of the objects found in the original?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `shallowcopy()`
- [ ] `deepcopy()`
- [ ] `copy()`
- [ ] `clone()`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `shallowcopy()`
- [x] `deepcopy()`
- [ ] `copy()`
- [ ] `clone()`


::: {.explanation}
The `deepcopy()` function creates a new object and recursively copies all objects found in the original. A shallow copy only copies the references to the original objects.
:::
:::
:::

