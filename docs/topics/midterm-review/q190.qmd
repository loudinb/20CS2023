### Question 191 {.question}

Which of the following will remove the element `3` from the list?

```python
numbers = [1, 2, 3, 4, 5]
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `numbers.pop(3)`
- [ ] `numbers.remove(3)`
- [ ] `del numbers[3]`
- [ ] `numbers.clear()`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `numbers.pop(3)`
- [x] `numbers.remove(3)`
- [ ] `del numbers[3]`
- [ ] `numbers.clear()`


::: {.explanation}
The `remove(3)` method will remove the first occurrence of the value `3` from the list. `pop()` and `del` remove elements by index, not value, and `clear()` removes all elements.
:::
:::
:::

### Question 192 {.question}

The `break` statement skips the rest of the current iteration and moves to the next iteration.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] True
- [x] False


::: {.explanation}
The `break` statement exits the loop entirely, while the `continue` statement skips the rest of the current iteration and moves to the next one.
:::
:::
:::

### Question 193 {.question}

Fill in the blanks to open a json file in write mode using automatic resource management.

```python
[____] [____]('file_name.json', 'w') as f:
    # do stuff with file
```

::: {.r-stack}
::: {.absolute .left-0 .top-0 width=100%}
Answers:



:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
Answers: 
1. `with`
2. `open`

::: {.explanation}
The `with` statement is used for automatic resource management, and `open()` is the function used to open files in Python. Together, they ensure that the file is properly opened and closed.
:::
:::
:::

### Question 194 {.question}

Which of the following is the correct syntax to open a file for reading in Python?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `open('file.txt', 'w')`
- [ ] `open('file.txt', 'r')`
- [ ] `open('file.txt', 'rw')`
- [ ] `open('file.txt', 'a')`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `open('file.txt', 'w')`
- [x] `open('file.txt', 'r')`
- [ ] `open('file.txt', 'rw')`
- [ ] `open('file.txt', 'a')`


::: {.explanation}
To open a file for reading, the correct mode is `'r'`. The `'w'` mode is for writing, and `'a'` is for appending. The `'rw'` mode does not exist.
:::
:::
:::

### Question 195 {.question}

What is the result of the following code?

```python
x = 10
x += 5
print(x)
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `5`
- [ ] `10`
- [ ] `15`
- [ ] `None`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `5`
- [ ] `10`
- [x] `15`
- [ ] `None`


::: {.explanation}
The expression `x += 5` increments the value of `x` by 5, so the value of `x` becomes 15.
:::
:::
:::

### Question 196 {.question}

What will be the result of the following code?

```python
numbers = [1, 2, 3]
numbers.extend([4, 5])
print(numbers)
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `[1, 2, 3]`
- [ ] `[1, 2, 3, [4, 5]]`
- [ ] `[4, 5, 1, 2, 3]`
- [ ] `[1, 2, 3, 4, 5]`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `[1, 2, 3]`
- [ ] `[1, 2, 3, [4, 5]]`
- [ ] `[4, 5, 1, 2, 3]`
- [x] `[1, 2, 3, 4, 5]`


::: {.explanation}
The `extend()` method adds all elements from the provided iterable (`[4, 5]`) to the end of the list, resulting in `[1, 2, 3, 4, 5]`.
:::
:::
:::

