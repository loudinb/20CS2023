### Question 121 {.question}

What is the result of the following code?

```python
name = "Alice"
print(name.lower())
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `ALICE`
- [ ] `Alice`
- [ ] `alice`
- [ ] `Error`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `ALICE`
- [ ] `Alice`
- [x] `alice`
- [ ] `Error`


::: {.explanation}
The `.lower()` method converts all characters in the string to lowercase, so `"Alice"` becomes `"alice"`.
:::
:::
:::

### Question 122 {.question}

::: {.smaller-80}
Match the operator to the description:

- `<=`
- `!=`
- `==`
- `>`

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Less than or equal to; Not equal to; Equal to; Greater than
- [ ] Not equal to; Less than or equal to; Equal to; Greater than
- [ ] Equal to; Greater than; Less than or equal to; Not equal to
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] Less than or equal to; Not equal to; Equal to; Greater than
- [ ] Not equal to; Less than or equal to; Equal to; Greater than
- [ ] Equal to; Greater than; Less than or equal to; Not equal to


::: {.explanation}
The correct matching is: `<=` means "less than or equal to", `!=` means "not equal to", `==` means "equal to", and `>` means "greater than".
:::
:::
:::
:::

### Question 123 {.question}

Which of the following are true about class attributes? (Select all that apply)

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Attributes are shared by all instances of a class.
- [ ] They are always accessed with `get()`.
- [ ] They are defined with the methods of the class.
- [ ] They are defined within the class construction but outside of any method definitions.
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] Attributes are shared by all instances of a class.
- [ ] They are always accessed with `get()`.
- [ ] They are defined with the methods of the class.
- [x] They are defined within the class construction but outside of any method definitions.


::: {.explanation}
Class attributes are shared by all instances of a class and are defined within the class but outside of any methods.
:::
:::
:::

### Question 124 {.question}

What is a `.pyc` file?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] A Python script file
- [ ] A bytecode-compiled file generated by the Python interpreter
- [ ] A Python configuration file
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] A Python script file
- [x] A bytecode-compiled file generated by the Python interpreter
- [ ] A Python configuration file


::: {.explanation}
A `.pyc` file is a bytecode-compiled version of a Python script, which allows the interpreter to execute the code faster by skipping the compilation step in subsequent runs.
:::
:::
:::

### Question 125 {.question}

All keyword arguments are not needed as long as those omitted arguments have default values in the function definition.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] True
- [ ] False


::: {.explanation}
As long as omitted arguments have default values defined in the function, they are not required when calling the function.
:::
:::
:::

### Question 126 {.question}

::: {.smaller-80}
Which statement correctly squares `my_investments` resulting in the output `rich = [250000, 1, 40000, 22090000]`?

```python
money_in_stocks = [500, 1, 200, 4700]
stock_tickers = ['TSLA', 'ME', 'ADBE']
combined = list(zip(money_in_stocks, stock_tickers))
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `rich = [i[0]**2 for i in combined]`
- [ ] `rich = [i**2 for x[0] in combined]`
- [ ] `rich = [i[0]^2 for i in combined]`
- [ ] `rich = [i^2 for x[0] in combined]`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] `rich = [i[0]**2 for i in combined]`
- [ ] `rich = [i**2 for x[0] in combined]`
- [ ] `rich = [i[0]^2 for i in combined]`
- [ ] `rich = [i^2 for x[0] in combined]`


::: {.explanation}
The correct list comprehension is `rich = [i[0]**2 for i in combined]`, which squares the first element (stock prices) of each tuple in `combined`.
:::
:::
:::
:::

### Question 127 {.question}

What is the result of the following code?

```python
numbers = [1, 2, 3, 4, 5]
del numbers[1:4]
print(numbers)
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `[1, 2, 3, 4, 5]`
- [ ] `[1, 4, 5]`
- [ ] `[1, 5]`
- [ ] `[]`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `[1, 2, 3, 4, 5]`
- [ ] `[1, 4, 5]`
- [x] `[1, 5]`
- [ ] `[]`


::: {.explanation}
The `del` statement removes the elements from index 1 to 3 (excluding index 4), so `numbers` becomes `[1, 5]`.
:::
:::
:::

### Question 128 {.question}

What is the documentation called when it is below a function and denoted with triple quotes (`"""`)?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Multiline comment
- [ ] Docstring
- [ ] Inline comment
- [ ] Block comment
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] Multiline comment
- [x] Docstring
- [ ] Inline comment
- [ ] Block comment


::: {.explanation}
In Python, a `docstring` is a string literal that appears right after the definition of a function, method, class, or module, used for documentation.
:::
:::
:::

### Question 129 {.question}

What error does this return?

```python
def define_local(number):
    local_variable = 7
    return local_variable

print(local_variable)
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `SyntaxError`
- [ ] `NameError`
- [ ] `TypeError`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `SyntaxError`
- [x] `NameError`
- [ ] `TypeError`


::: {.explanation}
A `NameError` occurs because `local_variable` is defined inside the function and is not accessible outside its scope.
:::
:::
:::

### Question 130 {.question}

Which of the following are considered `False` in Python?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `0`
- [ ] `set()`
- [ ] `1`
- [ ] `None`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] `0`
- [x] `set()`
- [ ] `1`
- [x] `None`


::: {.explanation}
In Python, `0`, `set()`, and `None` are considered `False` in boolean contexts, while `1` is `True`.
:::
:::
:::

