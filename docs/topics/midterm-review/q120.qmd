### Question 121 {.question}

The `@property` decorator in Python is used to:

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] To make methods private and inaccessible from outside the class
- [ ] To allow methods to be called without parentheses, as if they were attributes
- [ ] To automatically convert the return values of methods to properties of the class
- [ ] To enable method chaining for these particular methods
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] To make methods private and inaccessible from outside the class
- [x] To allow methods to be called without parentheses, as if they were attributes
- [ ] To automatically convert the return values of methods to properties of the class
- [ ] To enable method chaining for these particular methods


::: {.explanation}
The `@property` decorator allows a method to be accessed like an attribute, without needing parentheses, simplifying syntax.
:::
:::
:::

### Question 122 {.question}

::: {.smaller-70}
Consider the following statement about list copying in Python: You modify a mutable object (sometimes referred to as a shared object) within either the original list or a copied list, and the change was not reflected in the other list. Which statement explains this correctly?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Deep copying creates new objects for all nested elements, preventing changes from affecting both lists
- [ ] Shallow copying creates new objects for the top-level elements, but nested mutable objects still share references
- [ ] Both the original and copied lists reference the same memory addresses for all elements
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] Deep copying creates new objects for all nested elements, preventing changes from affecting both lists
- [x] Shallow copying creates new objects for the top-level elements, but nested mutable objects still share references
- [ ] Both the original and copied lists reference the same memory addresses for all elements


::: {.explanation}
In a shallow copy, only the references to the top-level elements are copied, meaning any changes to nested mutable objects will affect both lists.
:::
:::
:::
:::

### Question 123 {.question}

Which of the following is **not** a valid variable name in Python?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `2score`
- [ ] `_score`
- [ ] `total_score`
- [ ] `score2`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] `2score`
- [ ] `_score`
- [ ] `total_score`
- [ ] `score2`


::: {.explanation}
Variable names in Python cannot begin with a number, so `2score` is invalid. All other options are valid variable names.
:::
:::
:::

### Question 124 {.question}

The Python interpreter executes code line by line, rather than compiling the entire program at once.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] True
- [ ] False


::: {.explanation}
Python is an interpreted language, meaning the interpreter reads and executes code line by line, as opposed to compiled languages that translate the entire program into machine code before execution.
:::
:::
:::

### Question 125 {.question}

Which method would you use to find the position of a substring within a string?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `search()`
- [ ] `find()`
- [ ] `index()`
- [ ] `position()`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `search()`
- [x] `find()`
- [ ] `index()`
- [ ] `position()`


::: {.explanation}
The `find()` method returns the lowest index of the substring if it is found in the string; otherwise, it returns `-1`.
:::
:::
:::

### Question 126 {.question}

We use exceptions by raising them with `raise` and catching them with `______` statements

::: {.r-stack}
::: {.absolute .left-0 .top-0 width=100%}
Answer: 
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
Answer: `try/except`

::: {.explanation}
Exceptions in Python are raised using the `raise` keyword and are caught using `try/except` statements. The full structure typically includes `try`, `except`, and optionally `else` and `finally` blocks.
:::
:::
:::

### Question 127 {.question}

What is the type resulting from this conversion of a dictionary to a collection?

```python
my_dict = {'a': 1, 'b': 2}
my_set = set(my_dict)
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] List
- [ ] Set
- [ ] Tuple
- [ ] Array
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] List
- [x] Set
- [ ] Tuple
- [ ] Array


::: {.explanation}
Converting a dictionary to a set returns a set containing only the keys of the dictionary.
:::
:::
:::

### Question 128 {.question}

What do we call the function inside a decorator called?

The ________ function.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Inner
- [ ] Decorated
- [ ] Wrapper
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] Inner
- [ ] Decorated
- [x] Wrapper

::: {.explanation}
The function inside a decorator is called the "wrapper" function because it wraps around the original function to add extra functionality.
:::
:::
:::

### Question 129 {.question}

We use a logger in Python to do which of the following?

::: {.r-stack}
::: {.absolute .left-0 .top-0 width=100%}
- [ ] Debugging
- [ ] Program monitoring
- [ ] Hyperthreading
- [ ] Parallelism
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] Debugging
- [x] Program monitoring
- [ ] Hyperthreading
- [ ] Parallelism

::: {.explanation}
Loggers in Python are primarily used for debugging and program monitoring. They allow you to track the flow of your program and record important information, errors, or warnings. Hyperthreading and parallelism are not related to logging.
:::
:::
:::

### Question 130 {.question}

What is a `.pyc` file?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] A Python script file
- [ ] A bytecode-compiled file generated by the Python interpreter
- [ ] A Python configuration file
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] A Python script file
- [x] A bytecode-compiled file generated by the Python interpreter
- [ ] A Python configuration file


::: {.explanation}
A `.pyc` file is a bytecode-compiled version of a Python script, which allows the interpreter to execute the code faster by skipping the compilation step in subsequent runs.
:::
:::
:::

