### Question 171 {.question}

Complete this statement regarding mutability: Lists are ____________ while tuples are ____________.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] mutable, mutable
- [ ] mutable, immutable
- [ ] immutable, mutable
- [ ] immutable, immutable
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] mutable, mutable
- [x] mutable, immutable
- [ ] immutable, mutable
- [ ] immutable, immutable


::: {.explanation}
Lists in Python are mutable, meaning their elements can be changed, added, or removed. Tuples, on the other hand, are immutable and cannot be altered after their creation.
:::
:::
:::

### Question 172 {.question}

Fill in the blank: To remove and return the last element from a list, use the ________ method.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `remove()`
- [ ] `pop()`
- [ ] `clear()`
- [ ] `delete()`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `remove()`
- [x] `pop()`
- [ ] `clear()`
- [ ] `delete()`


::: {.explanation}
The `pop()` method removes and returns the last element of a list. The `remove()` method deletes a specific element by value.
:::
:::
:::

### Question 173 {.question}

The following is the output from what module often used for automated testing?

```{.bash}
======================================================================
FAIL: test (__main__.TestIdentity)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "<ipython-input-11-e44778304d6f>", line 5, in test
    self.assertAlmostEqual(result, expected)
AssertionError: 0.00017089843750002018 != 0.0 within 7 places
----------------------------------------------------------------------
Ran 1 test in 0.004s
FAILED (failures=1)
```

::: {.r-stack}
::: {.absolute .left-0 .top-0 width=100%}
Answer: 
:::
::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
Answer: `unittest`
::: {.explanation}
This output is from the `unittest` module, which is Python's built-in testing framework. The output shows a test failure, including the name of the test method, the line where the failure occurred, and details about the assertion that failed.
:::
:::
:::

### Question 174 {.question}

The `__init__` method is the __________ for a class.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Destructor
- [ ] Constructor
- [ ] Method initializer
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] Destructor
- [x] Constructor
- [ ] Method initializer


::: {.explanation}
The `__init__` method is the constructor method in Python, used to initialize objects of a class when they are instantiated.
:::
:::
:::

### Question 175 {.question}

Fill in the missing code:

```python
import logging
logger = logging.getLogger(__name__)
file_handler = logging.FileHandler('file.log')
file_handler._______________(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
logger.addHandler(file_handler)
# now do whatever you want like logger.debug, logger.error, etc. 

```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
Answer: 
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
Answer: `setFormatter`

::: {.explanation}
The `setFormatter()` method is used to set the formatter for the handler. This determines how the log messages are formatted when they are written to the log file.
:::
:::
:::

### Question 176 {.question}

You use the decorator, `@___________`, to denote static methods.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `staticmethod`
- [ ] `classmethod`
- [ ] `initmethod`
- [ ] `property`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] `staticmethod`
- [ ] `classmethod`
- [ ] `initmethod`
- [ ] `property`


::: {.explanation}
The `@staticmethod` decorator is used to denote static methods, which do not access instance or class-level attributes.
:::
:::
:::

### Question 177 {.question}

Exceptions in Python are derived (inherited) from a base class called `Exception`.

::: {.r-stack}
::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] True
- [ ] False

::: {.explanation}
This statement is true. In Python, most built-in exceptions are derived from the `Exception` class. This class serves as the base class for all built-in, non-system-exiting exceptions.
:::
:::
:::

### Question 178 {.question}

Which of the following are considered `False` in Python?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `0`
- [ ] `set()`
- [ ] `1`
- [ ] `None`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] `0`
- [x] `set()`
- [ ] `1`
- [x] `None`


::: {.explanation}
In Python, `0`, `set()`, and `None` are considered `False` in boolean contexts, while `1` is `True`.
:::
:::
:::

### Question 179 {.question}

What will be the result of the following code?

```python
text = "Python Programming"
print(text.replace("Python", "Java"))
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `Python Java`
- [ ] `Java Programming`
- [ ] `PythonProgramming`
- [ ] `Programming Java`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `Python Java`
- [x] `Java Programming`
- [ ] `PythonProgramming`
- [ ] `Programming Java`


::: {.explanation}
The `replace()` method replaces all occurrences of the substring `"Python"` with `"Java"`, resulting in `"Java Programming"`.
:::
:::
:::

### Question 180 {.question}

::: {.smaller-80}
You donâ€™t know how many people will attend your club meeting, but you want to make a record of who attended by passing names through your function. Fill in the blank to unpack the arguments.

```python
def record_attendance(meeting_date, *__________):
    print(f"Meeting date: {meeting_date}")
    print("People who attended:", __________)
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `names`
- [ ] `args`
- [ ] `kwargs`
- [ ] `participants`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `names`
- [x] `args`
- [ ] `kwargs`
- [ ] `participants`


::: {.explanation}
The `*args` syntax allows you to pass a variable number of positional arguments to the function. The variable `args` will hold all the passed names.
:::
:::
:::
:::

