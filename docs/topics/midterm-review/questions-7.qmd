## Question 1 {.question}

True or False: The `if-elif-else` statement allows you to evaluate multiple conditions, and the `else` block is optional.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] True
- [ ] False

::: {.explanation}
The `if-elif-else` statement in Python is used to evaluate multiple conditions, and the `else` block is optional and executes only if none of the conditions are `True`.
:::

:::

:::



## Question 2 {.question}

Which of the following statements is **not** true regarding nested conditional statements?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Nested conditionals allow you to check multiple conditions in sequence.
- [ ] Excessive nesting of conditionals can reduce code readability.
- [ ] Functions should not be used to simplify nested conditionals.
- [ ] Nested conditionals can create complex decision-making structures.
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] Nested conditionals allow you to check multiple conditions in sequence.
- [ ] Excessive nesting of conditionals can reduce code readability.
- [x] Functions should not be used to simplify nested conditionals.
- [ ] Nested conditionals can create complex decision-making structures.

::: {.explanation}
Using functions to simplify complex nested conditional statements is considered good practice as it improves code readability and maintainability.
:::

:::

:::



## Question 3 {.question}

What will be the output of the following code?

```python
temperature = 35
if temperature > 30:
    print("It's hot outside!")
else:
    print("The weather is pleasant.")
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `"The weather is pleasant."`
- [ ] `"It's cold outside!"`
- [ ] `"It's hot outside!"`
- [ ] `None`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `"The weather is pleasant."`
- [ ] `"It's cold outside!"`
- [x] `"It's hot outside!"`
- [ ] `None`

::: {.explanation}
Since `temperature > 30` is `True`, the code inside the `if` block is executed, resulting in the output `"It's hot outside!"`.
:::

:::

:::



## Question 4 {.question}

Which of the following best describes the `match` statement introduced in Python 3.10?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] A replacement for `if` statements.
- [ ] A way to perform arithmetic operations.
- [ ] A more concise and readable way to match a value against multiple patterns.
- [ ] A new loop structure.
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] A replacement for `if` statements.
- [ ] A way to perform arithmetic operations.
- [x] A more concise and readable way to match a value against multiple patterns.
- [ ] A new loop structure.

::: {.explanation}
The `match` statement allows you to match a value against multiple patterns, providing a more concise and readable alternative to long `if-elif-else` chains.
:::

:::

:::



## Question 5 {.question}

What will be the output of the following `match` statement?

```python
score = 72

match score:
    case score if score >= 90:
        print("A")
    case score if score >= 80:
        print("B")
    case score if score >= 70:
        print("C")
    case _:
        print("D")
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `"A"`
- [ ] `"B"`
- [ ] `"C"`
- [ ] `"D"`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `"A"`
- [ ] `"B"`
- [x] `"C"`
- [ ] `"D"`

::: {.explanation}
Since `score` is `72`, it matches the condition `score >= 70`, so the output is `"C"`.
:::

:::

:::



## Question 1 {.question}

True or False: In Python, the `for` loop is commonly used when you know the number of iterations beforehand.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] True
- [ ] False

::: {.explanation}
The `for` loop in Python is typically used for iterating over a sequence when the number of iterations is known in advance, such as iterating over a list or using the `range()` function.
:::

:::

:::



## Question 2 {.question}

Which of the following statements will cause the loop to skip the current iteration and move to the next one?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `break`
- [ ] `continue`
- [ ] `pass`
- [ ] `stop`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `break`
- [x] `continue`
- [ ] `pass`
- [ ] `stop`

::: {.explanation}
The `continue` statement is used to skip the rest of the code inside the current iteration of the loop and proceed to the next iteration.
:::

:::

:::



## Question 3 {.question}

What will be the output of the following code?

```python
for i in range(5):
    if i == 3:
        break
    print(i)
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `0, 1, 2, 3, 4`
- [ ] `3, 4`
- [ ] `0, 1, 2`
- [ ] `0, 1, 2, 3`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] `0, 1, 2`

::: {.explanation}
The `break` statement causes the loop to terminate when `i` equals `3`. Therefore, only `0, 1, 2` are printed before the loop stops.
:::

:::

:::



## Question 4 {.question}

Which of the following is true about the `else` block used with a `for` or `while` loop?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] It always executes after the loop ends.
- [ ] It executes only if the loop ends without encountering a `break` statement.
- [ ] It executes only if the loop has at least one iteration.
- [ ] It is required to have an `else` block with every loop.
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] It always executes after the loop ends.
- [x] It executes only if the loop ends without encountering a `break` statement.
- [ ] It executes only if the loop has at least one iteration.
- [ ] It is required to have an `else` block with every loop.

::: {.explanation}
The `else` block in a loop executes only if the loop completes all of its iterations without encountering a `break` statement.
:::

:::

:::