## Question 11 {.question}

What will be the result of the following expression?

```python
import sys

epsilon = sys.float_info.epsilon
print(1.0 + epsilon / 2 == 1.0)
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `False`
- [ ] `True`
- [ ] `An error is thrown`
- [ ] `Depends on the system`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `False`
- [x] `True`
- [ ] `An error is thrown`
- [ ] `Depends on the system`

::: {.explanation}
The value `epsilon / 2` is smaller than the floating-point precision limit, which means adding it to `1.0` results in a value that cannot be distinguished from `1.0`, thus resulting in `True`.
:::

:::

:::



## Question 12 {.question}

Which of the following is the correct way to create a complex number in Python?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `complex(2, 3)`
- [ ] `2 + 3i`
- [ ] `(2, 3j)`
- [ ] `complex[2, 3]`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] `complex(2, 3)`
- [ ] `2 + 3i`
- [ ] `(2, 3j)`
- [ ] `complex[2, 3]`

::: {.explanation}
In Python, you can create a complex number by using `complex(real, imag)` or using the `a + bj` syntax, such as `2 + 3j`. `complex(2, 3)` correctly initializes a complex number with real part `2` and imaginary part `3`.
:::

:::

:::



## Question 13 {.question}

True or False: In Python, `True` is equivalent to the integer value `1` and `False` is equivalent to `0`.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] True
- [ ] False

::: {.explanation}
In Python, `True` and `False` are actually subclasses of `int`, where `True` is equivalent to `1` and `False` is equivalent to `0`.
:::

:::

:::



## Question 14 {.question}

Which of the following values would be considered `False` when cast to a boolean using `bool()`?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `0`
- [ ] `None`
- [ ] `""` (empty string)
- [ ] `[]` (empty list)
- [ ] All of the above
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `0`
- [ ] `None`
- [ ] `""` (empty string)
- [ ] `[]` (empty list)
- [x] All of the above

::: {.explanation}
The values `0`, `None`, an empty string (`""`), and an empty list (`[]`) are all considered `False` when cast to a boolean using `bool()`.
:::

:::

:::



## Question 15 {.question}

What will be the output of the following code?

```python
print(0 and 1)
print(1 and 2)
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `1` and `2`
- [ ] `0` and `2`
- [ ] `False` and `2`
- [ ] `None` and `1`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `1` and `2`
- [x] `0` and `2`
- [ ] `False` and `2`
- [ ] `None` and `1`

::: {.explanation}
The `and` operator returns the first falsy value or the last value if all are truthy. `0 and 1` evaluates to `0`, and `1 and 2` evaluates to `2`.
:::

:::

:::



## Question 4 {.question}

True or False: The expression `True + False` in Python will evaluate to `1`.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] True
- [ ] False

::: {.explanation}
`True` is equivalent to `1` and `False` is equivalent to `0`. Therefore, `True + False` evaluates to `1 + 0`, which is `1`.
:::

:::

:::



## Question 5 {.question}

Which statement is true about the behavior of the `or` operator in Python?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `or` always returns `True` or `False`.
- [ ] `or` returns the first truthy value, or the last value if all are falsy.
- [ ] `or` always returns the last operand.
- [ ] `or` throws an error if neither value is `True`.
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `or` always returns `True` or `False`.
- [x] `or` returns the first truthy value, or the last value if all are falsy.
- [ ] `or` always returns the last operand.
- [ ] `or` throws an error if neither value is `True`.

::: {.explanation}
In Python, the `or` operator returns the first truthy value it encounters, or if none are truthy, it returns the last operand.
:::

:::

:::



## Question 1 {.question}

True or False: Strings in Python can be enclosed in either single (`'`) or double (`"`) quotes, and they both work the same way.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] True
- [ ] False

::: {.explanation}
In Python, both single and double quotes can be used interchangeably for strings, and they function the same way. This allows for greater flexibility, especially when the string itself contains quotes.
:::

:::

:::



## Question 2 {.question}

Which of the following escape sequences is used to insert a newline in a Python string?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `\\`
- [ ] `\n`
- [ ] `\t`
- [ ] `\'`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `\\`
- [x] `\n`
- [ ] `\t`
- [ ] `\'`

::: {.explanation}
The escape sequence `\n` is used to insert a newline in a Python string, allowing for line breaks.
:::

:::

:::


