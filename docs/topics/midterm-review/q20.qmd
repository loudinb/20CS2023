### Question 21 {.question}

Composition often provides more flexibility than inheritance.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] True
- [ ] False


::: {.explanation}
Composition allows greater flexibility by enabling the reuse of code through object composition rather than the rigid structure imposed by inheritance.
:::
:::
:::

### Question 22 {.question}

Which of the following methods modify a list in place? (Select all that apply)

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `sort()`
- [ ] `reverse()`
- [ ] `append()`
- [ ] `extend()`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] `sort()`
- [x] `reverse()`
- [x] `append()`
- [x] `extend()`


::: {.explanation}
All of these methods—`sort()`, `reverse()`, `append()`, and `extend()`—modify the list in place without creating a new list object.
:::
:::
:::

### Question 23 {.question}

Dictionaries are unordered sets of pairs. You access dictionary data by what?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Key
- [ ] Index
- [ ] Cell
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] Key
- [ ] Index
- [ ] Cell


::: {.explanation}
In Python, dictionary values are accessed by their keys, which are unique identifiers for each value in the dictionary.
:::
:::
:::

### Question 24 {.question}

Which of the following will convert the string `"123"` to an integer in Python?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `int("123")`
- [ ] `float("123")`
- [ ] `str("123")`
- [ ] `eval("123")`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] `int("123")`
- [ ] `float("123")`
- [ ] `str("123")`
- [ ] `eval("123")`


::: {.explanation}
The `int()` function converts the string `"123"` to an integer. The other methods either convert to a different type or evaluate a string as Python code, which is unnecessary here.
:::
:::
:::

### Question 25 {.question}

Arguments are passed by assignment, meaning a _________ to the object is passed to the function.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] reference
- [ ] copy
- [ ] pointer
- [ ] object
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] reference
- [ ] copy
- [ ] pointer
- [ ] object


::: {.explanation}
In Python, arguments are passed by assignment, which means that the reference to the object is passed to the function.
:::
:::
:::

### Question 26 {.question}

_________ methods don’t operate on instance or class data.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Static
- [ ] Instance
- [ ] Class
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] Static
- [ ] Instance
- [ ] Class


::: {.explanation}
Static methods don’t operate on instance or class data; they are utility methods within a class’s namespace.
:::
:::
:::

### Question 27 {.question}

In inheritance, the new class (subclass) inherits attributes and methods from the existing class, called the _________.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] superclass
- [ ] submethod
- [ ] metaclass
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] superclass
- [ ] submethod
- [ ] metaclass


::: {.explanation}
The superclass (also known as the parent class) provides the attributes and methods that the subclass inherits.
:::
:::
:::

### Question 28 {.question}

Which of the following are mutable?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Strings
- [ ] Dictionaries
- [ ] Numbers
- [ ] Tuples
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] Strings
- [x] Dictionaries
- [ ] Numbers
- [ ] Tuples


::: {.explanation}
Dictionaries are mutable, meaning they can be changed after creation. Strings, numbers, and tuples are immutable.
:::
:::
:::

### Question 29 {.question}

Which of the following expressions will raise a `TypeError`?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `"5" + "6"`
- [ ] `5 + 6`
- [ ] `"5" * 3`
- [ ] `"5" + 6`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `"5" + "6"`
- [ ] `5 + 6`
- [ ] `"5" * 3`
- [x] `"5" + 6`


::: {.explanation}
The expression `"5" + 6` will raise a `TypeError` because Python does not allow the concatenation of a string and an integer without explicit conversion.
:::
:::
:::

### Question 30 {.question}

Will the variable `x` have different memory addresses before and after modification in the following scenario?

```python
x = 5
print(id(x))
x = x + 1
print(id(x))
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Yes
- [ ] No
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] Yes
- [ ] No


::: {.explanation}
When you assign a new value to `x`, the memory address changes because integers are immutable in Python. Reassigning a variable creates a new object.
:::
:::
:::

