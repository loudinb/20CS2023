### Question 51 {.question}

What will be the result of the following code?

```python
numbers = [1, 2, 3]
numbers.extend([4, 5])
print(numbers)
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `[1, 2, 3]`
- [ ] `[1, 2, 3, [4, 5]]`
- [ ] `[4, 5, 1, 2, 3]`
- [ ] `[1, 2, 3, 4, 5]`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `[1, 2, 3]`
- [ ] `[1, 2, 3, [4, 5]]`
- [ ] `[4, 5, 1, 2, 3]`
- [x] `[1, 2, 3, 4, 5]`


::: {.explanation}
The `extend()` method adds all elements from the provided iterable (`[4, 5]`) to the end of the list, resulting in `[1, 2, 3, 4, 5]`.
:::
:::
:::

### Question 52 {.question}

Arguments can be passed only by position.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] True
- [x] False


::: {.explanation}
In Python, arguments can be passed either by position or by keyword.
:::
:::
:::

### Question 53 {.question}

Arguments are passed by assignment, meaning a _________ to the object is passed to the function.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] reference
- [ ] copy
- [ ] pointer
- [ ] object
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] reference
- [ ] copy
- [ ] pointer
- [ ] object


::: {.explanation}
In Python, arguments are passed by assignment, which means that the reference to the object is passed to the function.
:::
:::
:::

### Question 54 {.question}

Fill in the blank: To remove and return the last element from a list, use the ________ method.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `remove()`
- [ ] `pop()`
- [ ] `clear()`
- [ ] `delete()`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `remove()`
- [x] `pop()`
- [ ] `clear()`
- [ ] `delete()`


::: {.explanation}
The `pop()` method removes and returns the last element of a list. The `remove()` method deletes a specific element by value.
:::
:::
:::

### Question 55 {.question}

What function creates a new object and recursively inserts copies into it of the objects found in the original?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `shallowcopy()`
- [ ] `deepcopy()`
- [ ] `copy()`
- [ ] `clone()`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `shallowcopy()`
- [x] `deepcopy()`
- [ ] `copy()`
- [ ] `clone()`


::: {.explanation}
The `deepcopy()` function creates a new object and recursively copies all objects found in the original. A shallow copy only copies the references to the original objects.
:::
:::
:::

### Question 56 {.question}

Do static methods have a standard first parameter like instance and class methods? If so, which of the following?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] No parameters are passed to static methods.
- [ ] `self`
- [ ] `cls`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] No parameters are passed to static methods.
- [ ] `self`
- [ ] `cls`


::: {.explanation}
Static methods do not require parameters like `self` or `cls` since they donâ€™t operate on instance or class data.
:::
:::
:::

### Question 57 {.question}

What is the result of the following code?

```python
numbers = [1, 2, 3, 4, 5]
numbers.pop(2)
print(numbers)
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `[1, 2, 3, 4, 5]`
- [ ] `[1, 3, 4, 5]`
- [ ] `[1, 2, 4, 5]`
- [ ] `[1, 2, 3, 5]`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `[1, 2, 3, 4, 5]`
- [ ] `[1, 3, 4, 5]`
- [x] `[1, 2, 4, 5]`
- [ ] `[1, 2, 3, 5]`


::: {.explanation}
The `pop(2)` method removes the element at index 2, which is `3`. The list becomes `[1, 2, 4, 5]`.
:::
:::
:::

### Question 58 {.question}

Fill in the indices that will return the first element of the third row from the following matrix:

```python
matrix = [[9, 0, 1], [3, 3, 2], [7, 8, 3]]
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `matrix[2][0]`
- [ ] `matrix[0][2]`
- [ ] `matrix[1][0]`
- [ ] `matrix[0][0]`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] `matrix[2][0]`
- [ ] `matrix[0][2]`
- [ ] `matrix[1][0]`
- [ ] `matrix[0][0]`


::: {.explanation}
To access the first element of the third row (`[7, 8, 3]`), you use `matrix[2][0]`, which returns `7`.
:::
:::
:::

### Question 59 {.question}

The Python interpreter executes code line by line, rather than compiling the entire program at once.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] True
- [ ] False


::: {.explanation}
Python is an interpreted language, meaning the interpreter reads and executes code line by line, as opposed to compiled languages that translate the entire program into machine code before execution.
:::
:::
:::

### Question 60 {.question}

What keyword is used to indicate we are defining a function?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `fun`
- [ ] `function`
- [ ] `define`
- [ ] `def`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `fun`
- [ ] `function`
- [ ] `define`
- [x] `def`


::: {.explanation}
The `def` keyword is used in Python to define a function.
:::
:::
:::

