### Question 51 {.question}

::: {.smaller-70}
Match the list operation to its action:

- `list.append(x)`
- `list.pop()`
- `list.remove(x)`

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Adds x to the end of the list, Removes the last element of the list, Removes the first item from the list whose value is x
- [ ] Removes the last element of the list, Adds x to the end of the list, Removes the first item from the list whose value is x
- [ ] Removes the first item from the list whose value is x, Removes the last element of the list, Adds x to the end of the list
- [ ] Adds x to the end of the list, Removes the first item from the list whose value is x, Removes the last element of the list
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] Adds x to the end of the list, Removes the last element of the list, Removes the first item from the list whose value is x
- [ ] Removes the last element of the list, Adds x to the end of the list, Removes the first item from the list whose value is x
- [ ] Removes the first item from the list whose value is x, Removes the last element of the list, Adds x to the end of the list
- [ ] Adds x to the end of the list, Removes the first item from the list whose value is x, Removes the last element of the list


::: {.explanation}
- `list.append(x)` adds `x` to the end of the list.
- `list.pop()` removes and returns the last element of the list.
- `list.remove(x)` removes the first occurrence of `x` from the list.
:::
:::
:::
:::

### Question 52 {.question}

What keyword is used as the short version of `else if`?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `elseif`
- [ ] `elif`
- [ ] `ifelse`
- [ ] `else`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `elseif`
- [x] `elif`
- [ ] `ifelse`
- [ ] `else`


::: {.explanation}
In Python, the `elif` keyword is used as a shorthand for `else if`, allowing multiple conditional statements.
:::
:::
:::

### Question 53 {.question}

The `match` statement can be used to replace complex if-elif-else chains.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] True
- [ ] False


::: {.explanation}
The `match` statement, introduced in Python 3.10, allows for pattern matching, making it a good replacement for complex if-elif-else chains.
:::
:::
:::

### Question 54 {.question}

What is the documentation called when it is below a function and denoted with triple quotes (`"""`)?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Multiline comment
- [ ] Docstring
- [ ] Inline comment
- [ ] Block comment
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] Multiline comment
- [x] Docstring
- [ ] Inline comment
- [ ] Block comment


::: {.explanation}
In Python, a `docstring` is a string literal that appears right after the definition of a function, method, class, or module, used for documentation.
:::
:::
:::

### Question 55 {.question}

Which of the following is **not** a native type in Python?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Matrix
- [ ] Float
- [ ] Bool
- [ ] Dict
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] Matrix
- [ ] Float
- [ ] Bool
- [ ] Dict


::: {.explanation}
Python does not have a native "Matrix" type. However, libraries like NumPy provide a matrix or array type. Float, Bool, and Dict are native types.
:::
:::
:::

### Question 56 {.question}

In Python, a dictionary element has both a __________ and __________.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Key, Value
- [ ] Index, Value
- [ ] Key, Index
- [ ] Name, Value
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] Key, Value
- [ ] Index, Value
- [ ] Key, Index
- [ ] Name, Value


::: {.explanation}
In Python, dictionary elements are stored as key-value pairs. The key is used to access the associated value.
:::
:::
:::

### Question 57 {.question}

Which of the following are valid iterator tools?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `enumerate`
- [ ] `reversed`
- [ ] `parse`
- [ ] `split`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] `enumerate`
- [x] `reversed`
- [ ] `parse`
- [ ] `split`


::: {.explanation}
The `enumerate` and `reversed` functions are iterator tools. `parse` and `split` are not valid iterator tools in this context.
:::
:::
:::

### Question 58 {.question}

Which of the following is an example of a **constant** in Python, by convention?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `Total_Score`
- [ ] `PI`
- [ ] `maxScore`
- [ ] `snake_case`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `Total_Score`
- [x] `PI`
- [ ] `maxScore`
- [ ] `snake_case`


::: {.explanation}
By convention, constants in Python are written in all uppercase letters. `PI` is an example of a constant.
:::
:::
:::

### Question 59 {.question}

The primary benefit of using partial application in Python is which of the following?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] By fixing some arguments of a function, it can be called with fewer and make it simpler
- [ ] Faster performance can be achieved
- [ ] The function becomes immutable
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] By fixing some arguments of a function, it can be called with fewer and make it simpler
- [ ] Faster performance can be achieved
- [ ] The function becomes immutable


::: {.explanation}
The main benefit of partial application is that it simplifies function calls by fixing some arguments, making the function easier to use.
:::
:::
:::

### Question 60 {.question}

Raw strings are useful when your string is a file path that contains backslashes.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] True
- [ ] False


::: {.explanation}
Raw strings treat backslashes as literal characters rather than escape characters, which is useful when working with file paths that contain backslashes.
:::
:::
:::

