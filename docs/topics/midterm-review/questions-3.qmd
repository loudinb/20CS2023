## Question 4 {.question}

Fill in the blank: The recommended way to embed variables into strings in Python is using _______.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `str.format()`
- [ ] `% operator`
- [ ] `f-strings`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `str.format()`
- [ ] `% operator`
- [x] `f-strings`

::: {.explanation}
Introduced in Python 3.6, f-strings provide a concise and readable way to embed expressions inside string literals. For example: `f"My name is {name}"`.
:::

:::

:::



## Question 5 {.question}

Which of the following is **not** a method available for Python strings?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `.upper()`
- [ ] `.replace()`
- [ ] `.split()`
- [ ] `.merge()`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `.upper()`
- [ ] `.replace()`
- [ ] `.split()`
- [x] `.merge()`

::: {.explanation}
There is no `.merge()` method for Python strings. The methods `.upper()`, `.replace()`, and `.split()` are all valid string methods used to manipulate strings.
:::

:::

:::



## Question 1 {.question}

True or False: Lists in Python are mutable, meaning you can modify their content after they are created.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] True
- [ ] False

::: {.explanation}
Lists in Python are mutable, meaning you can add, remove, or modify elements in a list after it has been created.
:::

:::

:::



## Question 2 {.question}

Which of the following methods is used to add an element to the end of a list?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `insert()`
- [ ] `append()`
- [ ] `extend()`
- [ ] `add()`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `insert()`
- [x] `append()`
- [ ] `extend()`
- [ ] `add()`

::: {.explanation}
The `append()` method is used to add an element to the end of a list. The `insert()` method adds an element at a specified index, and `extend()` adds multiple elements from another list.
:::

:::

:::



## Question 3 {.question}

What will be the output of the following code?

```python
numbers = [1, 2, 3, 4, 5]
numbers[2:4] = [30, 40]
print(numbers)
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `[1, 2, 3, 4, 5, 30, 40]`
- [ ] `[1, 2, 3, 30, 40, 5]`
- [ ] `[1, 2, 30, 40, 5]`
- [ ] `[1, 2, 3, 4, 5]`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `[1, 2, 3, 4, 5, 30, 40]`
- [ ] `[1, 2, 3, 30, 40, 5]`
- [x] `[1, 2, 30, 40, 5]`
- [ ] `[1, 2, 3, 4, 5]`

::: {.explanation}
The slicing `numbers[2:4] = [30, 40]` replaces the third and fourth elements of the list (`3` and `4`) with `30` and `40`.
:::

:::

:::



## Question 4 {.question}

Which of the following is **not** a method used to remove elements from a list?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `remove()`
- [ ] `pop()`
- [ ] `clear()`
- [ ] `delete()`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `remove()`
- [ ] `pop()`
- [ ] `clear()`
- [x] `delete()`

::: {.explanation}
Python lists do not have a `delete()` method. The methods `remove()`, `pop()`, and `clear()` are used to remove elements from a list.
:::

:::

:::



## Question 5 {.question}

Fill in the blank: The `zip()` function in Python takes two or more lists and merges them into a list of _______.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Lists
- [ ] Sets
- [ ] Tuples
- [ ] Dictionaries
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] Lists
- [ ] Sets
- [x] Tuples
- [ ] Dictionaries

::: {.explanation}
The `zip()` function takes two or more lists and merges them into a list of tuples, where each tuple contains the corresponding elements from the input lists.
:::

:::

:::



## Question 1 {.question}

True or False: When you create a shallow copy of a list using the `copy()` method, modifying a nested object in the original list will also modify the same object in the copied list.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] True
- [ ] False

::: {.explanation}
A shallow copy creates a new list object, but the nested objects inside the list are still referenced by both the original and the copied list. Therefore, modifying a nested object in the original will affect the copied list.
:::

:::

:::



## Question 2 {.question}

Which of the following statements is true regarding deep copies?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] A deep copy creates a new list, but nested objects are shared between the original and the copy.
- [ ] A deep copy recursively copies all nested objects, creating independent copies of all elements.
- [ ] A deep copy only works with lists that contain primitive types like integers or strings.
- [ ] A deep copy cannot be created in Python.
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] A deep copy creates a new list, but nested objects are shared between the original and the copy.
- [x] A deep copy recursively copies all nested objects, creating independent copies of all elements.
- [ ] A deep copy only works with lists that contain primitive types like integers or strings.
- [ ] A deep copy cannot be created in Python.

::: {.explanation}
A deep copy creates a completely independent copy of the original list, including all nested objects, ensuring that changes to the original do not affect the copy.
:::

:::

:::



## Question 3 {.question}

What will be the output of the following code?

```python
import copy

original = [1, [2, 3], 4]
copied = copy.deepcopy(original)

original[1][0] = "A"
copied[1][1] = "Z"

print(original)
print(copied)
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `[1, [2, 3], 4]` and `[1, [2, 3], 4]`
- [ ] `[1, ['A', 3], 4]` and `[1, ['A', 'Z'], 4]`
- [ ] `[1, [2, 3], 4]` and `[1, ['A', 'Z'], 4]`
- [ ] `[1, ['A', 3], 4]` and `[1, [2, 'Z'], 4]`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `[1, [2, 3], 4]` and `[1, [2, 3], 4]`
- [ ] `[1, ['A', 3], 4]` and `[1, ['A', 'Z'], 4]`
- [ ] `[1, [2, 3], 4]` and `[1, ['A', 'Z'], 4]`
- [x] `[1, ['A', 3], 4]` and `[1, [2, 'Z'], 4]`

::: {.explanation}
The `deepcopy()` method creates an independent copy of the original list and all nested objects. Thus, changes to the original list (`original[1][0] = "A"`) and the copied list (`copied[1][1] = "Z"`) are reflected only in their respective lists.
:::

:::

:::


