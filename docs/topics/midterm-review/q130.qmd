### Question 131 {.question}

What will be the result of the following code?

```python
text = "hello world"
print(text.capitalize())
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `"HELLO WORLD"`
- [ ] `"Hello world"`
- [ ] `"hello World"`
- [ ] `"Hello World"`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `"HELLO WORLD"`
- [x] `"Hello world"`
- [ ] `"hello World"`
- [ ] `"Hello World"`


::: {.explanation}
The `capitalize()` method capitalizes the first character of the string, so `"hello world"` becomes `"Hello world"`.
:::
:::
:::

### Question 132 {.question}

What will be the result of the following code?

```python
text = "  Python  "
print(text.strip())
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `"  Python  "`
- [ ] `"Python"`
- [ ] `"  Python"`
- [ ] `"Python  "`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `"  Python  "`
- [x] `"Python"`
- [ ] `"  Python"`
- [ ] `"Python  "`


::: {.explanation}
The `strip()` method removes leading and trailing whitespace, so `"  Python  "` becomes `"Python"`.
:::
:::
:::

### Question 133 {.question}

What will be the result of the following code?

```python
numbers = [1, 2, 3, 4, 5]
print(sum(numbers))
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `5`
- [ ] `10`
- [ ] `15`
- [ ] `None`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `5`
- [ ] `10`
- [x] `15`
- [ ] `None`


::: {.explanation}
The `sum()` function calculates the sum of all elements in the list `[1, 2, 3, 4, 5]`, resulting in `15`.
:::
:::
:::

### Question 134 {.question}

What is the term for a function that retains access to variables from its surrounding scope, even after that scope has finished executing?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Closure
- [ ] Partial function
- [ ] Static function
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] Closure
- [ ] Partial function
- [ ] Static function


::: {.explanation}
A closure is a function that remembers the variables from its enclosing scope even after that scope has finished executing.
:::
:::
:::

### Question 135 {.question}

When calling a function, what term is used to describe the values passed to the function when it is called?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Arguments
- [ ] Parameters
- [ ] Inputs
- [ ] Values
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] Arguments
- [ ] Parameters
- [ ] Inputs
- [ ] Values


::: {.explanation}
Arguments are the actual values passed into the function when it is called. Parameters are the placeholders used in the function definition.
:::
:::
:::

### Question 136 {.question}

The function `___________()` can be used to call methods from the superclass.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `super()`
- [ ] `base()`
- [ ] `parent()`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] `super()`
- [ ] `base()`
- [ ] `parent()`


::: {.explanation}
The `super()` function allows you to call methods from the superclass, enabling access to inherited methods and attributes.
:::
:::
:::

### Question 137 {.question}

What keyword is used as the short version of `else if`?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `elif`
- [ ] `elseif`
- [ ] `ifelse`
- [ ] `else`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] `elif`
- [ ] `elseif`
- [ ] `ifelse`
- [ ] `else`


::: {.explanation}
The `elif` keyword in Python is used as a shorthand for `else if`, allowing multiple conditions in conditional statements.
:::
:::
:::

### Question 138 {.question}

Which of the following are true regarding objects? (Select all that apply)

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] An object is an instance of a class
- [ ] An object can have its unique set of attribute values
- [ ] An object can only have one function
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] An object is an instance of a class
- [x] An object can have its unique set of attribute values
- [ ] An object can only have one function


::: {.explanation}
Objects in Python are instances of classes, and they can have unique attribute values. An object can have multiple methods (functions).
:::
:::
:::

### Question 139 {.question}

Anonymous functions in Python are defined with what keyword?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `def`
- [ ] `anon`
- [ ] `lambda`
- [ ] `fun`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `def`
- [ ] `anon`
- [x] `lambda`
- [ ] `fun`


::: {.explanation}
In Python, anonymous functions are created using the `lambda` keyword.
:::
:::
:::

### Question 140 {.question}

If an object cannot be modified, which of the following describes it?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Mutable
- [ ] Immutable
- [ ] Static
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] Mutable
- [x] Immutable
- [ ] Static


::: {.explanation}
An object that cannot be modified is considered "immutable". Examples of immutable types in Python include tuples and strings.
:::
:::
:::

