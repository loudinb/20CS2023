### Question 101 {.question}

Which of the following are true regarding objects? (Select all that apply)

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] An object is an instance of a class
- [ ] An object can have its unique set of attribute values
- [ ] An object can only have one function
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] An object is an instance of a class
- [x] An object can have its unique set of attribute values
- [ ] An object can only have one function


::: {.explanation}
Objects in Python are instances of classes, and they can have unique attribute values. An object can have multiple methods (functions).
:::
:::
:::

### Question 102 {.question}

_________ methods don’t operate on instance or class data.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Static
- [ ] Instance
- [ ] Class
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] Static
- [ ] Instance
- [ ] Class


::: {.explanation}
Static methods don’t operate on instance or class data; they are utility methods within a class’s namespace.
:::
:::
:::

### Question 103 {.question}

::: {.smaller-80}
Match the term to the type of relationship:

**Term**:

- Inheritance
- Composition

**Meaning**:

- is-a
- has-a

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Inheritance: has-a, Composition: is-a
- [ ] Inheritance: is-a, Composition: has-a
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] Inheritance: has-a, Composition: is-a
- [x] Inheritance: is-a, Composition: has-a


::: {.explanation}
Inheritance defines an "is-a" relationship, where the subclass is a type of the superclass. Composition defines a "has-a" relationship, where a class contains objects from other classes.
:::
:::
:::
:::

### Question 104 {.question}

A class is named `Dog`. We want to access the value of the attribute `name` (after instantiation). Which option is correct to do this?

```python
res = Dog("Sunday")
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `res.name`
- [ ] `Dog.name`
- [ ] `res(Dog).name`
- [ ] `name(Dog)`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] `res.name`
- [ ] `Dog.name`
- [ ] `res(Dog).name`
- [ ] `name(Dog)`


::: {.explanation}
You can access the `name` attribute of the `res` object using dot notation, as `res.name`.
:::
:::
:::

### Question 105 {.question}

What is the index variable here?

```python
x = [4, 5, 6]
for k, element in enumerate(x):
    print(k, element)
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `element`
- [ ] `k`
- [ ] `x`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `element`
- [x] `k`
- [ ] `x`


::: {.explanation}
In `enumerate(x)`, `k` is the index variable that represents the current position in the list, and `element` is the value at that position.
:::
:::
:::

### Question 106 {.question}

You want to add functionality to a function `boring_house()` by implementing a decorator. What code is missing?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] The `def` keyword.
- [ ] A return statement.
- [ ] The decorator definition with `@`.
- [ ] A lambda function.
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] The `def` keyword.
- [ ] A return statement.
- [x] The decorator definition with `@`.
- [ ] A lambda function.


::: {.explanation}
To use a decorator, you need to define it with the `@` symbol before the function it decorates.
:::
:::
:::

### Question 107 {.question}

Which of the following methods will replace all occurrences of a substring in a string?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `replace()`
- [ ] `find()`
- [ ] `split()`
- [ ] `strip()`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] `replace()`
- [ ] `find()`
- [ ] `split()`
- [ ] `strip()`


::: {.explanation}
The `replace()` method is used to replace all occurrences of a specified substring with another substring.
:::
:::
:::

### Question 108 {.question}

The `%` operator is the preferred way to format strings in Python.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] True
- [x] False


::: {.explanation}
The preferred way to format strings in modern Python is to use f-strings or the `format()` method. The `%` operator is considered outdated and less flexible.
:::
:::
:::

### Question 109 {.question}

What statement should be used to prevent an infinite `while` loop?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `stop`
- [ ] `halt`
- [ ] `break`
- [ ] `continue`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `stop`
- [ ] `halt`
- [x] `break`
- [ ] `continue`


::: {.explanation}
The `break` statement is used to exit a `while` loop prematurely, preventing it from becoming infinite.
:::
:::
:::

### Question 110 {.question}

::: {.smaller-75}
Match the term to the definition:

**Term**:

- Attributes
- Methods

**Meaning**:

- Functions that operate on the object’s data (behavior)
- Data associated with an object

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Functions that operate on the object’s data (behavior); Data associated with an object
- [ ] Data associated with an object; Functions that operate on the object’s data (behavior)
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] Functions that operate on the object’s data (behavior); Data associated with an object
- [x] Data associated with an object; Functions that operate on the object’s data (behavior)


::: {.explanation}
Attributes represent the data held by an object, while methods are the functions that operate on this data and define the object's behavior.
:::
:::
:::
:::

