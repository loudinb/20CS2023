### Question 101 {.question}

The `return` statement is required in every function in Python.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] True
- [x] False


::: {.explanation}
In Python, the `return` statement is optional. If no return value is provided, the function returns `None` by default.
:::
:::
:::

### Question 102 {.question}

Which of the following statements is true about comments in Python?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Comments begin with the characters `//`
- [ ] Comments begin with a `#` symbol
- [ ] Comments are only allowed on their own line, not after code on the same line
- [ ] Python does not support comments
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] Comments begin with the characters `//`
- [x] Comments begin with a `#` symbol
- [ ] Comments are only allowed on their own line, not after code on the same line
- [ ] Python does not support comments


::: {.explanation}
Comments in Python start with the `#` symbol and can be placed either on their own line or at the end of a line of code.
:::
:::
:::

### Question 103 {.question}

What will be the result of the following code?

```python
numbers = [5, 3, 8, 1]
numbers.sort()
print(numbers)
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `[5, 3, 8, 1]`
- [ ] `[8, 5, 3, 1]`
- [ ] `[1, 3, 5, 8]`
- [ ] `[3, 5, 8, 1]`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `[5, 3, 8, 1]`
- [ ] `[8, 5, 3, 1]`
- [x] `[1, 3, 5, 8]`
- [ ] `[3, 5, 8, 1]`


::: {.explanation}
The `sort()` method sorts the list in ascending order, so the list becomes `[1, 3, 5, 8]`.
:::
:::
:::

### Question 104 {.question}

Which of the following methods will replace all occurrences of a substring in a string?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `replace()`
- [ ] `find()`
- [ ] `split()`
- [ ] `strip()`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] `replace()`
- [ ] `find()`
- [ ] `split()`
- [ ] `strip()`


::: {.explanation}
The `replace()` method is used to replace all occurrences of a specified substring with another substring.
:::
:::
:::

### Question 105 {.question}

What is the result of the following code?

```python
text = "Python Programming"
print(text.find("Prog"))
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `0`
- [ ] `7`
- [ ] `-1`
- [ ] `None`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `0`
- [x] `7`
- [ ] `-1`
- [ ] `None`


::: {.explanation}
The `find()` method returns the index of the first occurrence of the substring `"Prog"` in `"Python Programming"`, which starts at index 7.
:::
:::
:::

### Question 106 {.question}

The process of creating an object from a class is called __________.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] instantiation
- [ ] declaration
- [ ] referencing
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] instantiation
- [ ] declaration
- [ ] referencing


::: {.explanation}
Instantiation is the process of creating a concrete object from a class definition.
:::
:::
:::

### Question 107 {.question}

What is the result of the following code?

```python
numbers = [1, 2, 3, 4, 5]
print(numbers[::2])
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `[1, 2, 3, 4, 5]`
- [ ] `[2, 4]`
- [ ] `[1, 3, 5]`
- [ ] `[5, 4, 3, 2, 1]`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `[1, 2, 3, 4, 5]`
- [ ] `[2, 4]`
- [x] `[1, 3, 5]`
- [ ] `[5, 4, 3, 2, 1]`


::: {.explanation}
The slice `numbers[::2]` returns every second element from the list, starting from the first element, resulting in `[1, 3, 5]`.
:::
:::
:::

### Question 108 {.question}

Both class attributes and instance attributes can be modified in class methods.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] True
- [ ] False


::: {.explanation}
Class methods can modify both class attributes and instance attributes by accessing them via the `cls` and `self` parameters, respectively.
:::
:::
:::

### Question 109 {.question}

According to Googleâ€™s Python Style Guide, which of the following is the correct way to name a function in Python?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] camelCase
- [ ] snake_case
- [ ] PascalCase
- [ ] UPPERCASE
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] camelCase
- [x] snake_case
- [ ] PascalCase
- [ ] UPPERCASE


::: {.explanation}
Google's Python Style Guide (and PEP 8) recommend using `snake_case` for function names, which is lowercase letters separated by underscores. This style improves readability.
:::
:::
:::

### Question 110 {.question}

Which of the following is **not** a purpose of Python decorators?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Add functionality
- [ ] Increase readability
- [ ] Make my program pretty
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] Add functionality
- [ ] Increase readability
- [x] Make my program pretty


::: {.explanation}
Decorators in Python are used to add functionality to existing functions or methods without modifying their code. They do not impact the appearance of your program.
:::
:::
:::

