### Question 41 {.question}

Which of the following are true about class attributes? (Select all that apply)

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Attributes are shared by all instances of a class.
- [ ] They are always accessed with `get()`.
- [ ] They are defined with the methods of the class.
- [ ] They are defined within the class construction but outside of any method definitions.
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] Attributes are shared by all instances of a class.
- [ ] They are always accessed with `get()`.
- [ ] They are defined with the methods of the class.
- [x] They are defined within the class construction but outside of any method definitions.


::: {.explanation}
Class attributes are shared by all instances of a class and are defined within the class but outside of any methods.
:::
:::
:::

### Question 42 {.question}

A class is named `Dog`. We want to access the value of the attribute `name` (after instantiation). Which option is correct to do this?

```python
res = Dog("Sunday")
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `res.name`
- [ ] `Dog.name`
- [ ] `res(Dog).name`
- [ ] `name(Dog)`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] `res.name`
- [ ] `Dog.name`
- [ ] `res(Dog).name`
- [ ] `name(Dog)`


::: {.explanation}
You can access the `name` attribute of the `res` object using dot notation, as `res.name`.
:::
:::
:::

### Question 43 {.question}

::: {.smaller-80}
Match the following to their purpose:

- `*args`
- `**kwargs`

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Collects keyword arguments; Collects positional arguments
- [ ] Collects positional arguments; Collects keyword arguments
- [ ] Collects arguments; Ignores arguments
- [ ] Ignores all arguments; Collects arguments
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] Collects keyword arguments; Collects positional arguments
- [x] Collects positional arguments; Collects keyword arguments
- [ ] Collects arguments; Ignores arguments
- [ ] Ignores all arguments; Collects arguments


::: {.explanation}
In Python, `*args` collects a variable number of positional arguments, while `**kwargs` collects keyword arguments.
:::
:::
:::
:::

### Question 44 {.question}

The `if-else` statement is an extension of the `if` statement that allows you to execute one block of code if the condition is `True` and another block if it is `False`.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] True
- [ ] False


::: {.explanation}
The `if-else` statement adds an alternative block of code that will run if the `if` condition evaluates to `False`.
:::
:::
:::

### Question 45 {.question}

::: {.smaller-80}
Select the correct statement regarding class methods:

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Class methods are always bound to the class and can be called on both the class and its instances
- [ ] Class methods are unbound and can only be called on the class itself, not on instances
- [ ] Class methods are bound to instances and can only be called on instances of the class
- [ ] Class methods are dynamically bound at runtime and can change their binding
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] Class methods are always bound to the class and can be called on both the class and its instances
- [ ] Class methods are unbound and can only be called on the class itself, not on instances
- [ ] Class methods are bound to instances and can only be called on instances of the class
- [ ] Class methods are dynamically bound at runtime and can change their binding

::: {.explanation}
Class methods are bound to the class, meaning they can be called on both the class itself and instances of the class. They are defined using the `@classmethod` decorator.
:::
:::
:::
:::

### Question 46 {.question}

A best practice for inheritance is to use _______ _______ classes to define interfaces. (2 words)

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Template-based
- [ ] Abstract base
- [ ] Super-parent
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] Template-based
- [x] Abstract base
- [ ] Super-parent


::: {.explanation}
Abstract base classes define interfaces that subclasses are required to implement, promoting consistency in the class hierarchy.
:::
:::
:::

### Question 47 {.question}

Which of the following methods is not available for frozen sets?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `intersection()`
- [ ] `union()`
- [ ] `add()`
- [ ] `is_subset()`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `intersection()`
- [ ] `union()`
- [x] `add()`
- [ ] `is_subset()`


::: {.explanation}
Frozen sets are immutable, so methods that modify the set, like `add()`, are not available.
:::
:::
:::

### Question 48 {.question}

What is the highest level of severity in Python's logging module?

::: {.r-stack}
::: {.absolute .left-0 .top-0 width=100%}
- [ ] CRITICAL
- [ ] critical
- [ ] Critical
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] CRITICAL
- [ ] critical
- [ ] Critical

::: {.explanation}
In Python's logging module, the highest level of severity is `CRITICAL`. The logging levels in order of increasing severity are: DEBUG, INFO, WARNING, ERROR, and CRITICAL. These levels are typically written in all caps when referred to by their constants in the logging module.
:::
:::
:::

### Question 49 {.question}

Which keyword negates a boolean value?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `not`
- [ ] `no`
- [ ] `negate`
- [ ] `inverse`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] `not`
- [ ] `no`
- [ ] `negate`
- [ ] `inverse`


::: {.explanation}
The `not` keyword is used to negate a boolean value in Python. For example, `not True` evaluates to `False`.
:::
:::
:::

### Question 50 {.question}

For instance methods, what is always the first parameter?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `self`
- [ ] `cls`
- [ ] `instance`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] `self`
- [ ] `cls`
- [ ] `instance`


::: {.explanation}
The first parameter for instance methods in Python must always be `self`, which refers to the current instance of the class.
:::
:::
:::

