### Question 71 {.question}

What operator is used to unpack a list or tuple?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `&`
- [ ] `*`
- [ ] `@`
- [ ] `#`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `&`
- [x] `*`
- [ ] `@`
- [ ] `#`


::: {.explanation}
The `*` operator is used to unpack lists or tuples in Python, for example, `*args` for unpacking arguments.
:::
:::
:::

### Question 72 {.question}

Passing mutable input arguments to a function and changing them inside the function can change them outside the function too.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] True
- [ ] False


::: {.explanation}
When mutable objects like lists or dictionaries are passed to a function, modifications inside the function can affect the object outside the function.
:::
:::
:::

### Question 73 {.question}

::: {.smaller-80}
Match the term to the type of relationship:

**Term**:

- Inheritance
- Composition

**Meaning**:

- is-a
- has-a

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Inheritance: has-a, Composition: is-a
- [ ] Inheritance: is-a, Composition: has-a
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] Inheritance: has-a, Composition: is-a
- [x] Inheritance: is-a, Composition: has-a


::: {.explanation}
Inheritance defines an "is-a" relationship, where the subclass is a type of the superclass. Composition defines a "has-a" relationship, where a class contains objects from other classes.
:::
:::
:::
:::

### Question 74 {.question}

Class definitions always require `__init__`.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] True
- [x] False


::: {.explanation}
The `__init__` method is not required.
:::
:::
:::

### Question 75 {.question}

What is the value of `x` before the break condition occurs in the following code?

```python
for x in range(10):
    if x >= 3:
        break
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] 0
- [ ] 2
- [ ] 3
- [ ] 4
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] 0
- [ ] 2
- [x] 3
- [ ] 4


::: {.explanation}
The loop runs until `x` is equal to 3, at which point the `break` statement is triggered, stopping the loop.
:::
:::
:::

### Question 76 {.question}

What is the index variable here?

```python
x = [4, 5, 6]
for k, element in enumerate(x):
    print(k, element)
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `element`
- [ ] `k`
- [ ] `x`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `element`
- [x] `k`
- [ ] `x`


::: {.explanation}
In `enumerate(x)`, `k` is the index variable that represents the current position in the list, and `element` is the value at that position.
:::
:::
:::

### Question 77 {.question}

Can you access a tuple element by index?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Yes
- [ ] No
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] Yes
- [ ] No


::: {.explanation}
Yes, tuple elements can be accessed by index in the same way as list elements.
:::
:::
:::

### Question 78 {.question}

True or False: In Python, the maximum recursion depth can be modified using the `sys` module.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] True
- [ ] False


::: {.explanation}
The `sys` module provides a function `sys.setrecursionlimit()` which allows you to change the maximum recursion depth.
:::
:::
:::

### Question 79 {.question}

What is the result of the following code?

```python
numbers = [1, 2, 3, 4, 5]
numbers.insert(2, 10)
print(numbers)
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `[1, 10, 2, 3, 4, 5]`
- [ ] `[1, 2, 10, 3, 4, 5]`
- [ ] `[10, 1, 2, 3, 4, 5]`
- [ ] `[1, 2, 3, 10, 4, 5]`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `[1, 10, 2, 3, 4, 5]`
- [x] `[1, 2, 10, 3, 4, 5]`
- [ ] `[10, 1, 2, 3, 4, 5]`
- [ ] `[1, 2, 3, 10, 4, 5]`


::: {.explanation}
The `insert(2, 10)` method inserts `10` at index 2, shifting the elements, so the result is `[1, 2, 10, 3, 4, 5]`.
:::
:::
:::

### Question 80 {.question}

You can create your own iterator by using the keyword ______ .

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `yield`
- [ ] `def`
- [ ] `return`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] `yield`
- [ ] `def`
- [ ] `return`


::: {.explanation}
You can create your own iterator in Python by defining a generator function that uses the `yield` keyword to return values one at a time.
:::
:::
:::

