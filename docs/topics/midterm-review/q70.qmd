### Question 71 {.question}

Which of the following expressions will return `True`?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `5 == "5"`
- [ ] `"Hello" == "hello"`
- [ ] `5 != 6`
- [ ] `3 >= 5`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `5 == "5"`
- [ ] `"Hello" == "hello"`
- [x] `5 != 6`
- [ ] `3 >= 5`


::: {.explanation}
The expression `5 != 6` is `True` because 5 is not equal to 6. All other expressions are `False` due to case sensitivity or mismatched types.
:::
:::
:::

### Question 72 {.question}

What type of loop can be used to repeat a code block until a condition is fulfilled?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `for` loop
- [ ] `while` loop
- [ ] `do-while` loop
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `for` loop
- [x] `while` loop
- [ ] `do-while` loop


::: {.explanation}
The `while` loop repeats the execution of a code block until a specific condition evaluates to `False`.
:::
:::
:::

### Question 73 {.question}

The `@property` decorator in Python is used to:

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] To make methods private and inaccessible from outside the class
- [ ] To allow methods to be called without parentheses, as if they were attributes
- [ ] To automatically convert the return values of methods to properties of the class
- [ ] To enable method chaining for these particular methods
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] To make methods private and inaccessible from outside the class
- [x] To allow methods to be called without parentheses, as if they were attributes
- [ ] To automatically convert the return values of methods to properties of the class
- [ ] To enable method chaining for these particular methods


::: {.explanation}
The `@property` decorator allows a method to be accessed like an attribute, without needing parentheses, simplifying syntax.
:::
:::
:::

### Question 74 {.question}

Which of the following are mutable?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Strings
- [ ] Dictionaries
- [ ] Numbers
- [ ] Tuples
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] Strings
- [x] Dictionaries
- [ ] Numbers
- [ ] Tuples


::: {.explanation}
Dictionaries are mutable, meaning they can be changed after creation. Strings, numbers, and tuples are immutable.
:::
:::
:::

### Question 75 {.question}

You can create your own iterator by using the keyword ______ .

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `yield`
- [ ] `def`
- [ ] `return`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] `yield`
- [ ] `def`
- [ ] `return`


::: {.explanation}
You can create your own iterator in Python by defining a generator function that uses the `yield` keyword to return values one at a time.
:::
:::
:::

### Question 76 {.question}

Which method would you use to find the position of a substring within a string?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `search()`
- [ ] `find()`
- [ ] `index()`
- [ ] `position()`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `search()`
- [x] `find()`
- [ ] `index()`
- [ ] `position()`


::: {.explanation}
The `find()` method returns the lowest index of the substring if it is found in the string; otherwise, it returns `-1`.
:::
:::
:::

### Question 77 {.question}

What will be the result of the following code?

```python
text = "  Python  "
print(text.strip())
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `"  Python  "`
- [ ] `"Python"`
- [ ] `"  Python"`
- [ ] `"Python  "`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `"  Python  "`
- [x] `"Python"`
- [ ] `"  Python"`
- [ ] `"Python  "`


::: {.explanation}
The `strip()` method removes leading and trailing whitespace, so `"  Python  "` becomes `"Python"`.
:::
:::
:::

### Question 78 {.question}

Which of the following is **not** a purpose of Python decorators?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Add functionality
- [ ] Increase readability
- [ ] Make my program pretty
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] Add functionality
- [ ] Increase readability
- [x] Make my program pretty


::: {.explanation}
Decorators in Python are used to add functionality to existing functions or methods without modifying their code. They do not impact the appearance of your program.
:::
:::
:::

### Question 79 {.question}

What is the result of the following code?

```python
numbers = [1, 2, 3, 4, 5]
numbers.insert(2, 10)
print(numbers)
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `[1, 10, 2, 3, 4, 5]`
- [ ] `[1, 2, 10, 3, 4, 5]`
- [ ] `[10, 1, 2, 3, 4, 5]`
- [ ] `[1, 2, 3, 10, 4, 5]`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `[1, 10, 2, 3, 4, 5]`
- [x] `[1, 2, 10, 3, 4, 5]`
- [ ] `[10, 1, 2, 3, 4, 5]`
- [ ] `[1, 2, 3, 10, 4, 5]`


::: {.explanation}
The `insert(2, 10)` method inserts `10` at index 2, shifting the elements, so the result is `[1, 2, 10, 3, 4, 5]`.
:::
:::
:::

### Question 80 {.question}

Choose all that apply: Which of the following can be used as dictionary keys?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Integers
- [ ] Strings
- [ ] Tuples
- [ ] Lists
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] Integers
- [x] Strings
- [x] Tuples
- [ ] Lists


::: {.explanation}
Dictionaries require immutable objects as keys. Integers, strings, and tuples are immutable, while lists are mutable and cannot be used as keys.
:::
:::
:::

