### Question 141 {.question}

When defining a function, the input variables are called the __________ of the function.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Arguments
- [ ] Parameters
- [ ] Inputs
- [ ] Variables
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] Arguments
- [x] Parameters
- [ ] Inputs
- [ ] Variables


::: {.explanation}
Parameters are the input variables defined in the function signature, while arguments are the actual values passed to the function when it is called.
:::
:::
:::

### Question 142 {.question}

Which of the following are mutable?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Strings
- [ ] Dictionaries
- [ ] Numbers
- [ ] Tuples
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] Strings
- [x] Dictionaries
- [ ] Numbers
- [ ] Tuples


::: {.explanation}
Dictionaries are mutable, meaning they can be changed after creation. Strings, numbers, and tuples are immutable.
:::
:::
:::

### Question 143 {.question}

What is the result of the following code?

```python
numbers = [1, 2, 3, 4, 5]
print(numbers[2:])
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `[1, 2]`
- [ ] `[3, 4, 5]`
- [ ] `[1, 2, 3, 4, 5]`
- [ ] `[2, 3, 4, 5]`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `[1, 2]`
- [x] `[3, 4, 5]`
- [ ] `[1, 2, 3, 4, 5]`
- [ ] `[2, 3, 4, 5]`


::: {.explanation}
The slice `numbers[2:]` returns a new list starting from index 2 to the end, which includes `[3, 4, 5]`.
:::
:::
:::

### Question 144 {.question}

What will be the result of the following code?

```python
numbers = [1, 2, 3, 4, 5]
print(sum(numbers))
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `5`
- [ ] `10`
- [ ] `15`
- [ ] `None`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `5`
- [ ] `10`
- [x] `15`
- [ ] `None`


::: {.explanation}
The `sum()` function calculates the sum of all elements in the list `[1, 2, 3, 4, 5]`, resulting in `15`.
:::
:::
:::

### Question 145 {.question}

::: {.smaller-80}
Objects are used to represent entities with both characteristics and behaviors. Which of the following statements most accurately describes the relationship between attributes and data?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Attributes are external variables that are passed to the object’s methods.
- [ ] Attributes are synonymous with class methods and cannot store data.
- [ ] Attributes are the data stored within the object, representing its state or characteristics.
- [ ] Attributes are the methods that operate on the object’s data.
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] Attributes are external variables that are passed to the object’s methods.
- [ ] Attributes are synonymous with class methods and cannot store data.
- [x] Attributes are the data stored within the object, representing its state or characteristics.
- [ ] Attributes are the methods that operate on the object’s data.


::: {.explanation}
Attributes are data members of an object that store information about the object's state or characteristics.
:::
:::
:::
:::

### Question 146 {.question}

The `if-else` statement is an extension of the `if` statement that allows you to execute one block of code if the condition is `True` and another block if it is `False`.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] True
- [ ] False


::: {.explanation}
The `if-else` statement adds an alternative block of code that will run if the `if` condition evaluates to `False`.
:::
:::
:::

### Question 147 {.question}

Composition often provides more flexibility than inheritance.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] True
- [ ] False


::: {.explanation}
Composition allows greater flexibility by enabling the reuse of code through object composition rather than the rigid structure imposed by inheritance.
:::
:::
:::

### Question 148 {.question}

Which method would you use to find the position of a substring within a string?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `search()`
- [ ] `find()`
- [ ] `index()`
- [ ] `position()`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `search()`
- [x] `find()`
- [ ] `index()`
- [ ] `position()`


::: {.explanation}
The `find()` method returns the lowest index of the substring if it is found in the string; otherwise, it returns `-1`.
:::
:::
:::

### Question 149 {.question}

The `if-elif-else` statement is an extension of the `if-else` statement that allows you to evaluate multiple conditions.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] True
- [ ] False


::: {.explanation}
The `if-elif-else` statement allows you to test multiple conditions and execute different blocks of code based on which condition is `True`.
:::
:::
:::

### Question 150 {.question}

Which of the following would result in a `SyntaxError`?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `print("Hello, world!")`
- [ ] `my_variable = 10`
- [ ] `if True print("Yes")`
- [ ] `a = 5 + 3`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `print("Hello, world!")`
- [ ] `my_variable = 10`
- [x] `if True print("Yes")`
- [ ] `a = 5 + 3`


::: {.explanation}
The line `if True print("Yes")` is missing a colon `:` after `True`, which results in a `SyntaxError`.
:::
:::
:::

