### Question 181 {.question}

::: {.smaller-80}
What is the primary difference between the Python shell and IPython shell?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Python shell is faster than IPython
- [ ] Python shell has better syntax highlighting
- [ ] There is no difference; they are just different names for the same thing
- [ ] IPython offers more features like tab completion and magic commands
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] Python shell is faster than IPython
- [ ] Python shell has better syntax highlighting
- [ ] There is no difference; they are just different names for the same thing
- [x] IPython offers more features like tab completion and magic commands


::: {.explanation}
IPython provides additional features such as enhanced introspection, tab completion, magic commands, and more, making it a more powerful interactive shell compared to the standard Python shell.
:::
:::
:::
:::


### Question 182 {.question}

::: {.smaller-70}
Match the list operation to its action:

- `list.append(x)`
- `list.pop()`
- `list.remove(x)`

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Adds x to the end of the list, Removes the last element of the list, Removes the first item from the list whose value is x
- [ ] Removes the last element of the list, Adds x to the end of the list, Removes the first item from the list whose value is x
- [ ] Removes the first item from the list whose value is x, Removes the last element of the list, Adds x to the end of the list
- [ ] Adds x to the end of the list, Removes the first item from the list whose value is x, Removes the last element of the list
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] Adds x to the end of the list, Removes the last element of the list, Removes the first item from the list whose value is x
- [ ] Removes the last element of the list, Adds x to the end of the list, Removes the first item from the list whose value is x
- [ ] Removes the first item from the list whose value is x, Removes the last element of the list, Adds x to the end of the list
- [ ] Adds x to the end of the list, Removes the first item from the list whose value is x, Removes the last element of the list


::: {.explanation}
- `list.append(x)` adds `x` to the end of the list.
- `list.pop()` removes and returns the last element of the list.
- `list.remove(x)` removes the first occurrence of `x` from the list.
:::
:::
:::
:::

### Question 183 {.question}

::: {.smaller-85}
The bolded and underlined code below demonstrates __________ attribute access.

```python
class Dog:
    def __init__(self, name):
        self.name = name

res = Dog("Sunday")
my_dog_name = ______________
print(my_dog_name)
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Instance
- [ ] Class
- [ ] API
- [ ] Port
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] Instance
- [ ] Class
- [ ] API
- [ ] Port


::: {.explanation}
The code demonstrates instance attribute access because `my_dog_name` retrieves the value of the `name` attribute from the instance `res`.
:::
:::
:::
:::

### Question 184 {.question}

::: {.smaller-80}
Which of the following is true about lambda functions?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Lambda functions must use the `def` keyword.
- [ ] Lambda functions are always used as decorators.
- [ ] Lambda functions are single-expression functions.
- [ ] Lambda functions cannot be assigned to variables.
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] Lambda functions must use the `def` keyword.
- [ ] Lambda functions are always used as decorators.
- [x] Lambda functions are single-expression functions.
- [ ] Lambda functions cannot be assigned to variables.


::: {.explanation}
Lambda functions are anonymous, single-expression functions defined using the `lambda` keyword. They can be assigned to variables or used as arguments.
:::
:::
:::
:::


### Question 185 {.question}

Which of the following are iterable objects?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Lists
- [ ] Tuples
- [ ] Strings
- [ ] Dictionaries
- [ ] All of the above
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] Lists
- [ ] Tuples
- [ ] Strings
- [ ] Dictionaries
- [x] All of the above


::: {.explanation}
Lists, tuples, strings, and dictionaries are all iterable objects in Python.
:::
:::
:::

### Question 186 {.question}

The `match` statement can be used to replace complex if-elif-else chains.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] True
- [ ] False


::: {.explanation}
The `match` statement, introduced in Python 3.10, allows for pattern matching, making it a good replacement for complex if-elif-else chains.
:::
:::
:::

### Question 187 {.question}

What will be the result of the following code?

```python
numbers = [5, 3, 8, 1]
numbers.sort()
print(numbers)
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `[5, 3, 8, 1]`
- [ ] `[8, 5, 3, 1]`
- [ ] `[1, 3, 5, 8]`
- [ ] `[3, 5, 8, 1]`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `[5, 3, 8, 1]`
- [ ] `[8, 5, 3, 1]`
- [x] `[1, 3, 5, 8]`
- [ ] `[3, 5, 8, 1]`


::: {.explanation}
The `sort()` method sorts the list in ascending order, so the list becomes `[1, 3, 5, 8]`.
:::
:::
:::

### Question 188 {.question}

Attributes specified in the class declaration are called ______ attributes.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Instance
- [ ] Local
- [ ] Class
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] Instance
- [ ] Local
- [x] Class


::: {.explanation}
Attributes defined within a class but outside of any methods are known as class attributes. These attributes are shared across all instances of the class.
:::
:::
:::

### Question 189 {.question}

Dictionaries are unordered sets of pairs. You access dictionary data by what?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Key
- [ ] Index
- [ ] Cell
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] Key
- [ ] Index
- [ ] Cell


::: {.explanation}
In Python, dictionary values are accessed by their keys, which are unique identifiers for each value in the dictionary.
:::
:::
:::

### Question 190 {.question}

The primary benefit of using partial application in Python is which of the following?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] By fixing some arguments of a function, it can be called with fewer and make it simpler
- [ ] Faster performance can be achieved
- [ ] The function becomes immutable
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] By fixing some arguments of a function, it can be called with fewer and make it simpler
- [ ] Faster performance can be achieved
- [ ] The function becomes immutable


::: {.explanation}
The main benefit of partial application is that it simplifies function calls by fixing some arguments, making the function easier to use.
:::
:::
:::

