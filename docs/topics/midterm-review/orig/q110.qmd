### Question 111 {.question}

True or false: Functions can be used as arguments just like other objects.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] True
- [ ] False


::: {.explanation}
In Python, functions are first-class objects, so they can be passed as arguments to other functions, returned from functions, and assigned to variables.
:::
:::
:::

### Question 112 {.question}

Which of the following functions can be used to get the length of a list in Python?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `count()`
- [ ] `size()`
- [ ] `length()`
- [ ] `len()`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `count()`
- [ ] `size()`
- [ ] `length()`
- [x] `len()`


::: {.explanation}
The built-in `len()` function returns the number of items in a list or any iterable in Python.
:::
:::
:::

### Question 113 {.question}

What type of loop can be used to repeat a code block until a condition is fulfilled?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `for` loop
- [ ] `while` loop
- [ ] `do-while` loop
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `for` loop
- [x] `while` loop
- [ ] `do-while` loop


::: {.explanation}
The `while` loop repeats the execution of a code block until a specific condition evaluates to `False`.
:::
:::
:::

### Question 114 {.question}

For instance methods, what is always the first parameter?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `self`
- [ ] `cls`
- [ ] `instance`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] `self`
- [ ] `cls`
- [ ] `instance`


::: {.explanation}
The first parameter for instance methods in Python must always be `self`, which refers to the current instance of the class.
:::
:::
:::

### Question 115 {.question}

Which of the following expressions will raise a `TypeError`?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `"5" + "6"`
- [ ] `5 + 6`
- [ ] `"5" * 3`
- [ ] `"5" + 6`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `"5" + "6"`
- [ ] `5 + 6`
- [ ] `"5" * 3`
- [x] `"5" + 6`


::: {.explanation}
The expression `"5" + 6` will raise a `TypeError` because Python does not allow the concatenation of a string and an integer without explicit conversion.
:::
:::
:::

### Question 116 {.question}

Give one example of a higher-order function that takes other functions as arguments.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `map()`
- [ ] `max()`
- [ ] `print()`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] `map()`
- [ ] `max()`
- [ ] `print()`


::: {.explanation}
The `map()` function is a higher-order function that takes another function as an argument and applies it to all items in an iterable.
:::
:::
:::

### Question 117 {.question}

In Python, TAB characters and 4 spaces can be used interchangeably for indentation.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] True
- [x] False


::: {.explanation}
Tabs and spaces should not be used interchangeably in Python. PEP 8 recommends using 4 spaces per indentation level to maintain consistency and avoid indentation errors.
:::
:::
:::

### Question 118 {.question}

Which of the following statements is true about comments in Python?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Comments begin with the characters `//`
- [ ] Comments begin with a `#` symbol
- [ ] Comments are only allowed on their own line, not after code on the same line
- [ ] Python does not support comments
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] Comments begin with the characters `//`
- [x] Comments begin with a `#` symbol
- [ ] Comments are only allowed on their own line, not after code on the same line
- [ ] Python does not support comments


::: {.explanation}
Comments in Python start with the `#` symbol and can be placed either on their own line or at the end of a line of code.
:::
:::
:::

### Question 119 {.question}

Which of the following are limitations of static methods? (Select all that apply)

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] They don’t have access to `self` and `cls`
- [ ] Race conditions are of primary concern
- [ ] They are detrimental to namespace organization
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] They don’t have access to `self` and `cls`
- [ ] Race conditions are of primary concern
- [ ] They are detrimental to namespace organization


::: {.explanation}
Static methods have the limitation of not being able to access `self` (instance data) or `cls` (class data), but they are not typically related to race conditions or namespace organization.
:::
:::
:::

### Question 120 {.question}

Fill in the blank: The average time complexity for dictionary operations (insert, delete, lookup) is O(___).

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] O(1)
- [ ] O(log n)
- [ ] O(n)
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] O(1)
- [ ] O(log n)
- [ ] O(n)


::: {.explanation}
Dictionary operations like insert, delete, and lookup generally have an average time complexity of O(1) due to the underlying hash table implementation.
:::
:::
:::

