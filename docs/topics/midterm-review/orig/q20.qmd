### Question 21 {.question}

You can only instantiate a class object once.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] True
- [x] False


::: {.explanation}
A class can be instantiated multiple times to create different objects with different states.
:::
:::
:::

### Question 22 {.question}

What is the technique called when some arguments of a function are fixed?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Partial application
- [ ] Semi function
- [ ] Static argumentation
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] Partial application
- [ ] Semi function
- [ ] Static argumentation


::: {.explanation}
Partial application refers to fixing some arguments of a function, producing a new function with fewer arguments.
:::
:::
:::

### Question 23 {.question}

The process of creating an object from a class is called __________.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] instantiation
- [ ] declaration
- [ ] referencing
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] instantiation
- [ ] declaration
- [ ] referencing


::: {.explanation}
Instantiation is the process of creating a concrete object from a class definition.
:::
:::
:::

### Question 24 {.question}

Complete this statement regarding mutability: Lists are ____________ while tuples are ____________.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] mutable, mutable
- [ ] mutable, immutable
- [ ] immutable, mutable
- [ ] immutable, immutable
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] mutable, mutable
- [x] mutable, immutable
- [ ] immutable, mutable
- [ ] immutable, immutable


::: {.explanation}
Lists in Python are mutable, meaning their elements can be changed, added, or removed. Tuples, on the other hand, are immutable and cannot be altered after their creation.
:::
:::
:::

### Question 25 {.question}

How would you compute `A âˆ© B` (intersection of sets A and B) in Python?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `A.intersection(B)`
- [ ] `A.symmetric_difference(B)`
- [ ] `A.int(B)`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] `A.intersection(B)`
- [ ] `A.symmetric_difference(B)`
- [ ] `A.int(B)`


::: {.explanation}
The `intersection()` method returns a set containing elements that are present in both sets `A` and `B`.
:::
:::
:::

### Question 26 {.question}

A class is named `Dog`. We want to access the value of the attribute `name` (after instantiation). Which option is correct to do this?

```python
res = Dog("Sunday")
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `res.name`
- [ ] `Dog.name`
- [ ] `res(Dog).name`
- [ ] `name(Dog)`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] `res.name`
- [ ] `Dog.name`
- [ ] `res(Dog).name`
- [ ] `name(Dog)`


::: {.explanation}
You can access the `name` attribute of the `res` object using dot notation, as `res.name`.
:::
:::
:::

### Question 27 {.question}

What is the documentation called when it is below a function and denoted with triple quotes (`"""`)?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Multiline comment
- [ ] Docstring
- [ ] Inline comment
- [ ] Block comment
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] Multiline comment
- [x] Docstring
- [ ] Inline comment
- [ ] Block comment


::: {.explanation}
In Python, a `docstring` is a string literal that appears right after the definition of a function, method, class, or module, used for documentation.
:::
:::
:::

### Question 28 {.question}

Anonymous functions in Python are defined with what keyword?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `def`
- [ ] `anon`
- [ ] `lambda`
- [ ] `fun`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `def`
- [ ] `anon`
- [x] `lambda`
- [ ] `fun`


::: {.explanation}
In Python, anonymous functions are created using the `lambda` keyword.
:::
:::
:::

### Question 29 {.question}

What is the special method that is automatically called when a new instance of a class is created, allowing you to initialize the attributes of the class?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `__str__`
- [ ] `__call__`
- [ ] `__init__`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `__str__`
- [ ] `__call__`
- [x] `__init__`


::: {.explanation}
The `__init__` method is the constructor method in Python, used to initialize the attributes of a class when an object is created.
:::
:::
:::

### Question 30 {.question}

What is the result of the following code?

```python
numbers = [1, 2, 3, 4, 5]
numbers.insert(2, 10)
print(numbers)
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `[1, 10, 2, 3, 4, 5]`
- [ ] `[1, 2, 10, 3, 4, 5]`
- [ ] `[10, 1, 2, 3, 4, 5]`
- [ ] `[1, 2, 3, 10, 4, 5]`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `[1, 10, 2, 3, 4, 5]`
- [x] `[1, 2, 10, 3, 4, 5]`
- [ ] `[10, 1, 2, 3, 4, 5]`
- [ ] `[1, 2, 3, 10, 4, 5]`


::: {.explanation}
The `insert(2, 10)` method inserts `10` at index 2, shifting the elements, so the result is `[1, 2, 10, 3, 4, 5]`.
:::
:::
:::

