### Question 91 {.question}

What is the result of the following code?

```python
numbers = [1, 2, 3, 4, 5]
print(numbers[::2])
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `[1, 2, 3, 4, 5]`
- [ ] `[2, 4]`
- [ ] `[1, 3, 5]`
- [ ] `[5, 4, 3, 2, 1]`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `[1, 2, 3, 4, 5]`
- [ ] `[2, 4]`
- [x] `[1, 3, 5]`
- [ ] `[5, 4, 3, 2, 1]`


::: {.explanation}
The slice `numbers[::2]` returns every second element from the list, starting from the first element, resulting in `[1, 3, 5]`.
:::
:::
:::

### Question 92 {.question}

The `__init__` method is the __________ for a class.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Destructor
- [ ] Constructor
- [ ] Method initializer
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] Destructor
- [x] Constructor
- [ ] Method initializer


::: {.explanation}
The `__init__` method is the constructor method in Python, used to initialize objects of a class when they are instantiated.
:::
:::
:::

### Question 93 {.question}

If I do a shallow copy of `og_list`, which of the following have different addresses?

```python
og_list = ['c', 'b', [53, 21], 40, 'a']
copied = og_list.copy()
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] List objects
- [ ] Element 3: `[53, 21]`
- [ ] Element 3, inner 1 and 2: `53` and `21`
- [ ] Element 4: `40`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] List objects
- [ ] Element 3: `[53, 21]`
- [ ] Element 3, inner 1 and 2: `53` and `21`
- [ ] Element 4: `40`


::: {.explanation}
In a shallow copy, the list objects themselves have different addresses, but the elements within the inner lists share the same references.
:::
:::
:::

### Question 94 {.question}

Which of the following will result in a `TypeError`?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `"5" + "6"`
- [ ] `5 + 6`
- [ ] `"5" * 3`
- [ ] `"5" + 6`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `"5" + "6"`
- [ ] `5 + 6`
- [ ] `"5" * 3`
- [x] `"5" + 6`


::: {.explanation}
The expression `"5" + 6` will raise a `TypeError` because Python does not allow concatenation of a string and an integer without explicit conversion. The other operations are valid.
:::
:::
:::

### Question 95 {.question}

Is “vacuous” a key or value in the following dictionary?

```python
dictionary = {
    "vacuous": "having or showing a lack of thought or intelligence; mindless",
    "apocryphal": "of doubtful authenticity",
    "Machiavellian": "devious"
}
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Key
- [ ] Value
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] Key
- [ ] Value


::: {.explanation}
In this dictionary, `"vacuous"` is the key, and its definition is the value associated with it.
:::
:::
:::

### Question 96 {.question}

When recursion continues until all available memory is used, the Python interpreter can crash without further exception. True or False?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] True
- [ ] False


::: {.explanation}
When recursion continues beyond the system's memory limit, the Python interpreter can crash due to a stack overflow error.
:::
:::
:::

### Question 97 {.question}

The `break` statement skips the rest of the current iteration and moves to the next iteration.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] True
- [x] False


::: {.explanation}
The `break` statement exits the loop entirely, while the `continue` statement skips the rest of the current iteration and moves to the next one.
:::
:::
:::

### Question 98 {.question}

Which of the following are benefits of OOP? (Select all that apply)

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Modularity
- [ ] Maintainability
- [ ] Complexity
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] Modularity
- [x] Maintainability
- [ ] Complexity


::: {.explanation}
OOP improves modularity by organizing code into objects and classes, which also enhances maintainability by making the code easier to understand and manage.
:::
:::
:::

### Question 99 {.question}

Which of the following will remove the element `3` from the list?

```python
numbers = [1, 2, 3, 4, 5]
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `numbers.pop(3)`
- [ ] `numbers.remove(3)`
- [ ] `del numbers[3]`
- [ ] `numbers.clear()`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `numbers.pop(3)`
- [x] `numbers.remove(3)`
- [ ] `del numbers[3]`
- [ ] `numbers.clear()`


::: {.explanation}
The `remove(3)` method will remove the first occurrence of the value `3` from the list. `pop()` and `del` remove elements by index, not value, and `clear()` removes all elements.
:::
:::
:::

### Question 100 {.question}

::: {.smaller-80}
Which of the following are true about Jupyter notebooks? (Select all that apply)

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] They allow for mixing code, text, and visualizations in a single document
- [ ] They support multiple programming languages, not just Python
- [ ] They can be run in a web browser
- [ ] They require a powerful dedicated server to run
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] They allow for mixing code, text, and visualizations in a single document
- [x] They support multiple programming languages, not just Python
- [x] They can be run in a web browser
- [ ] They require a powerful dedicated server to run


::: {.explanation}
Jupyter notebooks allow for mixing code, text (with Markdown), and visualizations. They are flexible and support multiple languages through different kernels. They can run locally on a personal machine via a web browser, so a powerful dedicated server is not required.
:::
:::
:::
:::
