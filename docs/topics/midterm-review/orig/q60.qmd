### Question 61 {.question}

What function do you use on an iterable to keep the index for each element when iterating through it?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `zip()`
- [ ] `enumerate()`
- [ ] `map()`
- [ ] `iter()`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `zip()`
- [x] `enumerate()`
- [ ] `map()`
- [ ] `iter()`


::: {.explanation}
The `enumerate()` function allows you to loop over an iterable and have an automatic counter (index) with each element.
:::
:::
:::

### Question 62 {.question}

Which of the following methods is used to remove whitespace from both the beginning and end of a string?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `strip()`
- [ ] `split()`
- [ ] `remove()`
- [ ] `replace()`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] `strip()`
- [ ] `split()`
- [ ] `remove()`
- [ ] `replace()`


::: {.explanation}
The `strip()` method removes leading and trailing whitespace from a string, while `split()` divides a string into parts, and `replace()` replaces substrings.
:::
:::
:::

### Question 63 {.question}

Which of the following is a key benefit of using setter methods in object-oriented programming?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] They automatically optimize the performance of attribute access.
- [ ] They allow for data validation, preventing invalid states.
- [ ] They enable automatic synchronization with external databases.
- [ ] They provide built-in encryption for sensitive attributes.
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] They automatically optimize the performance of attribute access.
- [x] They allow for data validation, preventing invalid states.
- [ ] They enable automatic synchronization with external databases.
- [ ] They provide built-in encryption for sensitive attributes.


::: {.explanation}
Setter methods allow for data validation, ensuring that attributes are set to valid values and preventing invalid states in an object.
:::
:::
:::

### Question 64 {.question}

When the function `calculate_letter_grade` is called, every parameter is replaced by an argument. True or False?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] True
- [ ] False


::: {.explanation}
True. When a function is called, every parameter defined in the function is replaced by the corresponding argument provided during the function call.
:::
:::
:::

### Question 65 {.question}

What is the output of the following code?

```python
s = "Python"
print(s[::-1])
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `"Python"`
- [ ] `"nohtyP"`
- [ ] `"P"`
- [ ] `Error`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `"Python"`
- [x] `"nohtyP"`
- [ ] `"P"`
- [ ] `Error`


::: {.explanation}
The slice `[::-1]` reverses the string, resulting in `"nohtyP"`.
:::
:::
:::

### Question 66 {.question}

Which of the following is an example of assigning a default value to a parameter in a function?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `x1, x2=0`
- [ ] `x1:0, x2`
- [ ] `x1, x2`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] `x1, x2=0`
- [ ] `x1:0, x2`
- [ ] `x1, x2`


::: {.explanation}
In Python, default values are assigned in function definitions like `x2=0`, meaning `x2` will take the value `0` if no argument is passed.
:::
:::
:::

### Question 67 {.question}

__________ is a core concept of OOP about hiding complex details.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Encapsulation
- [ ] Inheritance
- [ ] Polymorphism
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] Encapsulation
- [ ] Inheritance
- [ ] Polymorphism


::: {.explanation}
Encapsulation hides the internal details of how an object works and exposes only necessary interfaces.
:::
:::
:::

### Question 68 {.question}

When using the `@property` decorator to create a getter method in Python, you are always required to also implement a corresponding setter method.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] True
- [x] False


::: {.explanation}
The `@property` decorator can be used to create a getter method without the need for a corresponding setter method unless you need to control or validate the setting of the attribute.
:::
:::
:::

### Question 69 {.question}

_________ methods don’t operate on instance or class data.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Static
- [ ] Instance
- [ ] Class
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] Static
- [ ] Instance
- [ ] Class


::: {.explanation}
Static methods don’t operate on instance or class data; they are utility methods within a class’s namespace.
:::
:::
:::

### Question 70 {.question}

You want to maintain a single shared dictionary across all instances of the `Fungi` class. Which of the following would solve this problem? (Select all that apply)

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Use a global variable
- [ ] Make `favorite_fungi` a class variable
- [ ] Use a static method
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] Use a global variable
- [x] Make `favorite_fungi` a class variable
- [ ] Use a static method


::: {.explanation}
To share data across all instances of a class, you can make the attribute a class variable instead of an instance variable.
:::
:::
:::

