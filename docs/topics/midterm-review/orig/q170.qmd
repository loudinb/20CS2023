### Question 171 {.question}

Which of the following are benefits of using a consistent style guide? (Select all that apply)

::: {.r-stack .smaller-80}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] It improves code readability
- [ ] It makes collaboration easier
- [ ] It maintains consistency across projects
- [ ] It prevents certain classes of errors
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] It improves code readability
- [x] It makes collaboration easier
- [x] It maintains consistency across projects
- [ ] It prevents certain classes of errors

::: {.explanation}
Using a consistent style guide like PEP 8 improves code readability, enhances collaboration, and maintains consistency across multiple projects, though it does not inherently prevent errors.
:::
:::
:::

### Question 172 {.question}

According to Googleâ€™s Python Style Guide, which of the following is the correct way to name a function in Python?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] camelCase
- [ ] snake_case
- [ ] PascalCase
- [ ] UPPERCASE
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] camelCase
- [x] snake_case
- [ ] PascalCase
- [ ] UPPERCASE


::: {.explanation}
Google's Python Style Guide (and PEP 8) recommend using `snake_case` for function names, which is lowercase letters separated by underscores. This style improves readability.
:::
:::
:::

### Question 173 {.question}

What function creates a new object and recursively inserts copies into it of the objects found in the original?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `shallowcopy()`
- [ ] `deepcopy()`
- [ ] `copy()`
- [ ] `clone()`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `shallowcopy()`
- [x] `deepcopy()`
- [ ] `copy()`
- [ ] `clone()`


::: {.explanation}
The `deepcopy()` function creates a new object and recursively copies all objects found in the original. A shallow copy only copies the references to the original objects.
:::
:::
:::

### Question 174 {.question}

::: {.smaller-70}
Consider the following code:

```python
coffee = ['pumpkin spice', 'pistachio', 'decaf']
```

Match the results of the index to the output:

- `coffee[-1]`
- `coffee[0]`
- `coffee[:0]`
- `coffee[:-2]`

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] decaf, pumpkin spice, [], ['pumpkin spice', 'pistachio']
- [ ] decaf, pistachio, ['pumpkin spice'], []
- [ ] pistachio, decaf, ['pistachio'], ['pumpkin spice', 'decaf']
- [ ] pumpkin spice, decaf, ['decaf'], ['pistachio']
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] decaf, pumpkin spice, [], ['pumpkin spice', 'pistachio']
- [ ] decaf, pistachio, ['pumpkin spice'], []
- [ ] pistachio, decaf, ['pistachio'], ['pumpkin spice', 'decaf']
- [ ] pumpkin spice, decaf, ['decaf'], ['pistachio']


::: {.explanation}
- `coffee[-1]` returns the last element, `'decaf'`.
- `coffee[0]` returns the first element, `'pumpkin spice'`.
- `coffee[:0]` returns an empty list because it slices up to index 0, but does not include any elements.
- `coffee[:-2]` slices up to but excludes the second-to-last element, returning `['pumpkin spice', 'pistachio']`.
:::
:::
:::
:::

### Question 175 {.question}

A best practice for inheritance is to use _______ _______ classes to define interfaces. (2 words)

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Template-based
- [ ] Abstract base
- [ ] Super-parent
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] Template-based
- [x] Abstract base
- [ ] Super-parent


::: {.explanation}
Abstract base classes define interfaces that subclasses are required to implement, promoting consistency in the class hierarchy.
:::
:::
:::

### Question 176 {.question}

Which of the following is a mutable data type in Python?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `tuple`
- [ ] `str`
- [ ] `list`
- [ ] `int`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `tuple`
- [ ] `str`
- [x] `list`
- [ ] `int`


::: {.explanation}
The `list` data type is mutable, meaning its elements can be changed after the list is created. Other types like `tuple` and `str` are immutable.
:::
:::
:::

### Question 177 {.question}

The `@property` decorator in Python is used to:

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] To make methods private and inaccessible from outside the class
- [ ] To allow methods to be called without parentheses, as if they were attributes
- [ ] To automatically convert the return values of methods to properties of the class
- [ ] To enable method chaining for these particular methods
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] To make methods private and inaccessible from outside the class
- [x] To allow methods to be called without parentheses, as if they were attributes
- [ ] To automatically convert the return values of methods to properties of the class
- [ ] To enable method chaining for these particular methods


::: {.explanation}
The `@property` decorator allows a method to be accessed like an attribute, without needing parentheses, simplifying syntax.
:::
:::
:::

### Question 178 {.question}

If you modify an immutable object in either the original or the copied list, the change will be reflected in both lists.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] True
- [x] False


::: {.explanation}
Immutable objects cannot be modified after creation. When an immutable object (like a tuple or a string) is copied, changes are not reflected in both lists.
:::
:::
:::

### Question 179 {.question}

What is the result of the following code?

```python
name = "Alice"
print(name.lower())
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `ALICE`
- [ ] `Alice`
- [ ] `alice`
- [ ] `Error`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `ALICE`
- [ ] `Alice`
- [x] `alice`
- [ ] `Error`


::: {.explanation}
The `.lower()` method converts all characters in the string to lowercase, so `"Alice"` becomes `"alice"`.
:::
:::
:::

### Question 180 {.question}

Which of the following functions returns the largest value from a list of numbers?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `sum()`
- [ ] `max()`
- [ ] `largest()`
- [ ] `greater()`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `sum()`
- [x] `max()`
- [ ] `largest()`
- [ ] `greater()`


::: {.explanation}
The `max()` function returns the largest value in a list or any iterable. The other options do not exist or serve a different purpose in Python.
:::
:::
:::

