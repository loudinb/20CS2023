### Question 61 {.question}

Which of the following is NOT a way to run Python code?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Using the interactive shell
- [ ] Running a `.py` file from the command line
- [ ] Using an Integrated Development Environment (IDE)
- [ ] Compiling Python code into a standalone executable
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] Using the interactive shell
- [ ] Running a `.py` file from the command line
- [ ] Using an Integrated Development Environment (IDE)
- [x] Compiling Python code into a standalone executable


::: {.explanation}
Python is an interpreted language, and it is not typically compiled into standalone executables. Instead, Python scripts are executed directly by the interpreter.
:::
:::
:::

### Question 62 {.question}

True or False: `True` and `False` are subclasses of `int` in Python.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] True
- [ ] False


::: {.explanation}
In Python, `True` and `False` are actually instances of `int`, where `True` is equivalent to `1` and `False` is equivalent to `0`.
:::
:::
:::

### Question 63 {.question}

You can access the docstring of a function using the __________ attribute.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `__help__`
- [ ] `__doc__`
- [ ] `__info__`
- [ ] `__desc__`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `__help__`
- [x] `__doc__`
- [ ] `__info__`
- [ ] `__desc__`


::: {.explanation}
In Python, the `__doc__` attribute holds the docstring of a function, class, or module, providing an explanation of its purpose.
:::
:::
:::

### Question 64 {.question}

Which of the following methods can be used to add an element to the end of a list?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `insert()`
- [ ] `append()`
- [ ] `extend()`
- [ ] `push()`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `insert()`
- [x] `append()`
- [ ] `extend()`
- [ ] `push()`


::: {.explanation}
The `append()` method adds a single element to the end of a list. The `extend()` method adds all elements from an iterable, while `insert()` inserts an element at a specific index.
:::
:::
:::

### Question 65 {.question}

Are there duplicates when you union two sets?

Example:
```python
A = {1, 2, 3}
B = {2, 3, 4}
A.union(B)
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Yes
- [ ] No
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] Yes
- [x] No


::: {.explanation}
When you perform a union operation on two sets, the result contains only unique elements, meaning there are no duplicates.
:::
:::
:::

### Question 66 {.question}

Arguments can be passed only by position.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] True
- [x] False


::: {.explanation}
In Python, arguments can be passed either by position or by keyword.
:::
:::
:::

### Question 67 {.question}

What is the output of the following code?

```python
x = 10
y = 3
print(f"{x/y:.2f}")
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `3.3333333333`
- [ ] `3.33`
- [ ] `3.34`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `3.3333333333`
- [x] `3.33`
- [ ] `3.34`


::: {.explanation}
The format `:.2f` rounds the division result to two decimal places, giving an output of `3.33`.
:::
:::
:::

### Question 68 {.question}

Which of the following methods is used to remove whitespace from both the beginning and end of a string?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `strip()`
- [ ] `split()`
- [ ] `remove()`
- [ ] `replace()`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] `strip()`
- [ ] `split()`
- [ ] `remove()`
- [ ] `replace()`


::: {.explanation}
The `strip()` method removes leading and trailing whitespace from a string, while `split()` divides a string into parts, and `replace()` replaces substrings.
:::
:::
:::

### Question 69 {.question}

What type of loop can be used to repeat a code block until a condition is fulfilled?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `for` loop
- [ ] `while` loop
- [ ] `do-while` loop
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `for` loop
- [x] `while` loop
- [ ] `do-while` loop


::: {.explanation}
The `while` loop repeats the execution of a code block until a specific condition evaluates to `False`.
:::
:::
:::

### Question 70 {.question}

When recursion continues until all available memory is used, the Python interpreter can crash without further exception. True or False?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] True
- [ ] False


::: {.explanation}
When recursion continues beyond the system's memory limit, the Python interpreter can crash due to a stack overflow error.
:::
:::
:::

