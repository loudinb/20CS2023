## Question 1 {.question}

True or False: In Python, dictionaries are mutable, meaning their content can be modified after creation.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] True
- [ ] False

::: {.explanation}
Dictionaries in Python are mutable, meaning you can add, remove, or modify key-value pairs without creating a new dictionary.
:::

:::

:::



## Question 2 {.question}

Which of the following methods would raise a `KeyError` if the specified key does not exist in a dictionary?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `.get()`
- [ ] `[]` (Square brackets)
- [ ] `.pop()`
- [ ] `.clear()`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `.get()`
- [x] `[]` (Square brackets)
- [x] `.pop()`
- [ ] `.clear()`

::: {.explanation}
Accessing a key using square brackets or using `.pop()` with a non-existent key raises a `KeyError`. The `.get()` method, on the other hand, returns `None` or a specified default value if the key does not exist.
:::

:::

:::



## Question 3 {.question}

What will be the output of the following code?

```python
my_dict = {'name': 'Alice', 'age': 25, 'city': 'New York'}
my_dict.update({'age': 26, 'country': 'USA'})
print(my_dict)
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `{'name': 'Alice', 'age': 25, 'city': 'New York'}`
- [ ] `{'name': 'Alice', 'age': 25, 'city': 'New York', 'country': 'USA'}`
- [ ] `{'name': 'Alice', 'age': 26, 'city': 'New York', 'country': 'USA'}`
- [ ] `{'name': 'Alice', 'age': 26, 'country': 'USA'}`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `{'name': 'Alice', 'age': 25, 'city': 'New York'}`
- [ ] `{'name': 'Alice', 'age': 25, 'city': 'New York', 'country': 'USA'}`
- [x] `{'name': 'Alice', 'age': 26, 'city': 'New York', 'country': 'USA'}`
- [ ] `{'name': 'Alice', 'age': 26, 'country': 'USA'}`

::: {.explanation}
The `.update()` method modifies the dictionary in place by updating the existing `age` key to `26` and adding a new key `country` with value `USA`.
:::

:::

:::



## Question 4 {.question}

Which statement about dictionary keys is true?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Keys in a dictionary must be mutable.
- [ ] Keys in a dictionary can be of any data type.
- [ ] Dictionary keys must be hashable and immutable.
- [ ] Dictionary keys cannot be strings.
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] Keys in a dictionary must be mutable.
- [ ] Keys in a dictionary can be of any data type.
- [x] Dictionary keys must be hashable and immutable.
- [ ] Dictionary keys cannot be strings.

::: {.explanation}
Dictionary keys must be hashable and immutable types, such as strings, numbers, or tuples. Mutable types like lists cannot be used as dictionary keys.
:::

:::

:::



## Question 5 {.question}

What will be the result of the following code?

```python
sample_dict = {'a': 1, 'b': 2, 'c': 3}
last_item = sample_dict.popitem()
print(last_item)
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `('a', 1)`
- [ ] `('c', 3)`
- [ ] `'c': 3`
- [ ] `None`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `('a', 1)`
- [x] `('c', 3)`
- [ ] `'c': 3`
- [ ] `None`

::: {.explanation}
The `.popitem()` method removes and returns the last inserted key-value pair in a dictionary. In this example, the last item is `('c', 3)`.
:::

:::

:::



## Question 1 {.question}

True or False: In Python, sets are mutable, meaning you can add or remove elements after the set is created.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] True
- [ ] False

::: {.explanation}
Sets in Python are mutable, allowing you to add or remove elements after the set is created. However, `frozenset` is an immutable variant of a set.
:::

:::

:::



## Question 2 {.question}

Which of the following operations is used to remove an element from a set without raising an error if the element does not exist?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `.remove()`
- [ ] `.discard()`
- [ ] `.pop()`
- [ ] `.delete()`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `.remove()`
- [x] `.discard()`
- [ ] `.pop()`
- [ ] `.delete()`

::: {.explanation}
The `.discard()` method removes an element from the set but does not raise an error if the element is not found. The `.remove()` method would raise a `KeyError` if the element is not found.
:::

:::

:::



## Question 3 {.question}

What will be the result of the following code?

```python
set1 = {1, 2, 3, 4}
set2 = {3, 4, 5, 6}
difference_set = set1.difference(set2)
print(difference_set)
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `{3, 4}`
- [ ] `{1, 2}`
- [ ] `{5, 6}`
- [ ] `{1, 2, 5, 6}`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `{3, 4}`
- [x] `{1, 2}`
- [ ] `{5, 6}`
- [ ] `{1, 2, 5, 6}`

::: {.explanation}
The `.difference()` method returns the elements in `set1` that are not in `set2`. Therefore, `{1, 2}` are the elements that remain after removing the common elements (`3, 4`).
:::

:::

:::



## Question 4 {.question}

Which of the following statements about `frozenset` is true?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `frozenset` is a mutable version of a set.
- [ ] `frozenset` can be modified by adding new elements.
- [ ] `frozenset` can be used as a key in a dictionary.
- [ ] `frozenset` cannot be created in Python.
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `frozenset` is a mutable version of a set.
- [ ] `frozenset` can be modified by adding new elements.
- [x] `frozenset` can be used as a key in a dictionary.
- [ ] `frozenset` cannot be created in Python.

::: {.explanation}
`frozenset` is an immutable version of a set, meaning it cannot be modified after creation. Its immutability allows it to be used as a key in a dictionary.
:::

:::

:::



## Question 5 {.question}

What will be the output of the following code?

```python
set_a = {1, 2, 3}
set_b = {2, 3, 4}
union_set = set_a.union(set_b)
print(union_set)
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `{1, 2, 3}`
- [ ] `{2, 3, 4}`
- [ ] `{1, 4}`
- [ ] `{1, 2, 3, 4}`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `{1, 2, 3}`
- [ ] `{2, 3, 4}`
- [ ] `{1, 4}`
- [x] `{1, 2, 3, 4}`

::: {.explanation}
The `.union()` method returns all unique elements from both sets. Thus, `{1, 2, 3, 4}` is the union of `set_a` and `set_b`.
:::

:::

:::