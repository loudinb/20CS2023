### Question 11 {.question}

When the function `calculate_letter_grade` is called, every parameter is replaced by an argument. True or False?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] True
- [ ] False


::: {.explanation}
True. When a function is called, every parameter defined in the function is replaced by the corresponding argument provided during the function call.
:::
:::
:::

### Question 12 {.question}

True or false: Functions can be used as arguments just like other objects.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] True
- [ ] False


::: {.explanation}
In Python, functions are first-class objects, so they can be passed as arguments to other functions, returned from functions, and assigned to variables.
:::
:::
:::

### Question 13 {.question}

What will be the result of the following code?

```python
numbers = [1, 2, 3, 4, 5]
numbers.clear()
print(numbers)
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `[1, 2, 3, 4, 5]`
- [ ] `[1]`
- [ ] `None`
- [ ] `[]`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `[1, 2, 3, 4, 5]`
- [ ] `[1]`
- [ ] `None`
- [x] `[]`


::: {.explanation}
The `clear()` method removes all elements from the list, leaving it empty (`[]`).
:::
:::
:::

### Question 14 {.question}

What will be the result of the following code?

```python
text = "Python"
reversed_text = text[::-1]
print(reversed_text)
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `"Python"`
- [ ] `"nohtyP"`
- [ ] `"Pyth"`
- [ ] `"noth"`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `"Python"`
- [x] `"nohtyP"`
- [ ] `"Pyth"`
- [ ] `"noth"`


::: {.explanation}
The slicing `[::-1]` reverses the string `"Python"`, so the result is `"nohtyP"`.
:::
:::
:::

### Question 15 {.question}

________ loops are often used when working with multidimensional data structures.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `nested`
- [ ] `while`
- [ ] `for`
- [ ] `recursive`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] `nested`
- [ ] `while`
- [ ] `for`
- [ ] `recursive`


::: {.explanation}
Nested loops are frequently used to iterate over multidimensional data structures such as matrices or tensors.
:::
:::
:::

### Question 16 {.question}

F-strings can include expressions and function calls.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] True
- [ ] False


::: {.explanation}
F-strings allow you to embed expressions and function calls inside curly braces, making them a flexible way to format strings in Python.
:::
:::
:::

### Question 17 {.question}

What is the technique called when some arguments of a function are fixed?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Partial application
- [ ] Semi function
- [ ] Static argumentation
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] Partial application
- [ ] Semi function
- [ ] Static argumentation


::: {.explanation}
Partial application refers to fixing some arguments of a function, producing a new function with fewer arguments.
:::
:::
:::

### Question 18 {.question}

What function do you use on an iterable to keep the index for each element when iterating through it?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `zip()`
- [ ] `enumerate()`
- [ ] `map()`
- [ ] `iter()`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `zip()`
- [x] `enumerate()`
- [ ] `map()`
- [ ] `iter()`


::: {.explanation}
The `enumerate()` function allows you to loop over an iterable and have an automatic counter (index) with each element.
:::
:::
:::

### Question 19 {.question}

What is the result of the following code?

```python
numbers = [1, 2, 3, 4, 5]
numbers.pop(2)
print(numbers)
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `[1, 2, 3, 4, 5]`
- [ ] `[1, 3, 4, 5]`
- [ ] `[1, 2, 4, 5]`
- [ ] `[1, 2, 3, 5]`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `[1, 2, 3, 4, 5]`
- [ ] `[1, 3, 4, 5]`
- [x] `[1, 2, 4, 5]`
- [ ] `[1, 2, 3, 5]`


::: {.explanation}
The `pop(2)` method removes the element at index 2, which is `3`. The list becomes `[1, 2, 4, 5]`.
:::
:::
:::

### Question 20 {.question}

Which of the following functions can be used to get the length of a list in Python?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `count()`
- [ ] `size()`
- [ ] `length()`
- [ ] `len()`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `count()`
- [ ] `size()`
- [ ] `length()`
- [x] `len()`


::: {.explanation}
The built-in `len()` function returns the number of items in a list or any iterable in Python.
:::
:::
:::

