### Question 81 {.question}

Fill in the indices that will return the first element of the third row from the following matrix:

```python
matrix = [[9, 0, 1], [3, 3, 2], [7, 8, 3]]
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `matrix[2][0]`
- [ ] `matrix[0][2]`
- [ ] `matrix[1][0]`
- [ ] `matrix[0][0]`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] `matrix[2][0]`
- [ ] `matrix[0][2]`
- [ ] `matrix[1][0]`
- [ ] `matrix[0][0]`


::: {.explanation}
To access the first element of the third row (`[7, 8, 3]`), you use `matrix[2][0]`, which returns `7`.
:::
:::
:::

### Question 82 {.question}

What keyword is used to indicate we are defining a function?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `fun`
- [ ] `function`
- [ ] `define`
- [ ] `def`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `fun`
- [ ] `function`
- [ ] `define`
- [x] `def`


::: {.explanation}
The `def` keyword is used in Python to define a function.
:::
:::
:::

### Question 83 {.question}

A(n) ___________ test checks whether the functionality is correct.
::: {.r-stack}
::: {.absolute .left-0 .top-0 width=100%}
Answer: 
:::
::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
Answer: `functional`
::: {.explanation}
A functional test checks whether the functionality of a piece of software is correct. It focuses on testing the software against the functional requirements or specifications.
:::
:::
:::

### Question 84 {.question}

::: {.smaller-70}
Which line of code raises the exception?

```python
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    def say_hi(self):
        res = f"Hi, {self.name}"
        return res
try:
    actual_person2 = Person("Jonathan", 25)
    print(actual_person2.say_hi())
    actual_person3 = Person("Jonathan", 25, "NYC")
    print(actual_person3.say_hi())
except Exception as e:
    print(f"Ah! Error: {e}")
```

::: {.r-stack}
::: {.absolute .left-0 .top-0 width=100%}
- [ ] `actual_person3 = Person("Jonathan", 25, "NYC")`
- [ ] `actual_person2 = Person("Jonathan", 25)`
- [ ] `def __init__(self, name, age):`
- [ ] `print(actual_person2.say_hi())`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] `actual_person3 = Person("Jonathan", 25, "NYC")`
- [ ] `actual_person2 = Person("Jonathan", 25)`
- [ ] `def __init__(self, name, age):`
- [ ] `print(actual_person2.say_hi())`

::: {.explanation}
The `Person` class is defined with two parameters (`name` and `age`), but `actual_person3` is created with three arguments, causing a `TypeError`.
:::
:::
:::

:::

### Question 85 {.question}

A `KeyError` is raised when accessing a non-existent **list** item.

::: {.r-stack}
::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] True
- [x] False

::: {.explanation}
A `KeyError` is raised when accessing a non-existent key in a dictionary, not a list. Lists use index numbers, not keys.
:::
:::
:::

### Question 86 {.question}

Two lists can be concatenated using what operator?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `+`
- [ ] `-`
- [ ] `*`
- [ ] `/`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] `+`
- [ ] `-`
- [ ] `*`
- [ ] `/`


::: {.explanation}
In Python, the `+` operator is used to concatenate two lists, combining them into one.
:::
:::
:::

### Question 87 {.question}

You can pass functions as arguments, rename them, or delete them. 

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] True
- [ ] False


::: {.explanation}
In Python, functions are first-class objects, meaning they can be passed as arguments to other functions, renamed, or even deleted.
:::
:::
:::

### Question 88 {.question}

The `%` operator is the preferred way to format strings in Python.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] True
- [x] False


::: {.explanation}
The preferred way to format strings in modern Python is to use f-strings or the `format()` method. The `%` operator is considered outdated and less flexible.
:::
:::
:::

### Question 89 {.question}

OOP is a programming approach that organizes code around objects.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] True
- [ ] False


::: {.explanation}
Object-Oriented Programming (OOP) focuses on organizing code by creating objects that represent both data and behavior.
:::
:::
:::

### Question 90 {.question}

Are list slices deep or shallow?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Deep
- [ ] Shallow
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] Deep
- [x] Shallow


::: {.explanation}
List slices in Python are shallow copies, meaning they copy the references to the objects in the list, not the objects themselves.
:::
:::
:::

