### Question 161 {.question}

If a function has no return statement, it returns what?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] None
- [ ] 0
- [ ] NaN
- [ ] null
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] None
- [ ] 0
- [ ] NaN
- [ ] null


::: {.explanation}
If a Python function does not explicitly return a value, it returns `None` by default.
:::
:::
:::

### Question 162 {.question}

In Python, functions are __________.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] Objects
- [ ] Articles
- [ ] Things
- [ ] Items
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] Objects
- [ ] Articles
- [ ] Things
- [ ] Items


::: {.explanation}
In Python, functions are first-class objects, meaning they can be passed as arguments, returned from other functions, and assigned to variables.
:::
:::
:::

### Question 163 {.question}

Which handler is used to save logging information to a .log file?

::: {.r-stack}
::: {.absolute .left-0 .top-0 width=100%}
- [ ] FileHandler('file.log')
- [ ] StreamHandler()
- [ ] LogHandler('file.log')
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] FileHandler('file.log')
- [ ] StreamHandler()
- [ ] LogHandler('file.log')

::: {.explanation}
The `FileHandler` is used to save logging information to a file. In this case, `FileHandler('file.log')` would create a handler that writes log messages to a file named 'file.log'.
:::
:::
:::

### Question 164 {.question}

You can only instantiate a class object once.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] True
- [x] False


::: {.explanation}
A class can be instantiated multiple times to create different objects with different states.
:::
:::
:::

### Question 165 {.question}

Which of the following would result in a `SyntaxError`?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `print("Hello, world!")`
- [ ] `my_variable = 10`
- [ ] `if True print("Yes")`
- [ ] `a = 5 + 3`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `print("Hello, world!")`
- [ ] `my_variable = 10`
- [x] `if True print("Yes")`
- [ ] `a = 5 + 3`


::: {.explanation}
The line `if True print("Yes")` is missing a colon `:` after `True`, which results in a `SyntaxError`.
:::
:::
:::

### Question 166 {.question}

Changes in the program and in particular in its structure that do not affect its functionality are called code ____________.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
Answer: 
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
Answer: `refactoring`

::: {.explanation}
Code refactoring is the process of restructuring existing computer code without changing its external behavior. It's done to improve non-functional attributes of the software such as readability, complexity, maintainability, or performance.
:::
:::
:::

### Question 167 {.question}

In Python, TAB characters and 4 spaces can be used interchangeably for indentation.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] True
- [x] False


::: {.explanation}
Tabs and spaces should not be used interchangeably in Python. PEP 8 recommends using 4 spaces per indentation level to maintain consistency and avoid indentation errors.
:::
:::
:::

### Question 168 {.question}

What is the special method that is automatically called when a new instance of a class is created, allowing you to initialize the attributes of the class?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `__str__`
- [ ] `__call__`
- [ ] `__init__`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `__str__`
- [ ] `__call__`
- [x] `__init__`


::: {.explanation}
The `__init__` method is the constructor method in Python, used to initialize the attributes of a class when an object is created.
:::
:::
:::

### Question 169 {.question}

What keyword in exception handling allows you to capture the raised exception object, giving you access to its details?

::: {.r-stack}
::: {.absolute .left-0 .top-0 width=100%}
Answer:
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
Answer: `as`

::: {.explanation}
The `as` keyword is used to capture the exception object, allowing access to its details. For example: `except ExceptionType as e:`
:::
:::
:::

### Question 170 {.question}

Which of the following is an example of assigning a default value to a parameter in a function?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `x1, x2=0`
- [ ] `x1:0, x2`
- [ ] `x1, x2`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] `x1, x2=0`
- [ ] `x1:0, x2`
- [ ] `x1, x2`


::: {.explanation}
In Python, default values are assigned in function definitions like `x2=0`, meaning `x2` will take the value `0` if no argument is passed.
:::
:::
:::

