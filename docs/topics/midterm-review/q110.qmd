### Question 111 {.question}

The generic `except` block will catch **all** errors, this is not recommended, you should always catch specific exceptions.

::: {.r-stack}
::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] True
- [ ] False

::: {.explanation}
It's best practice to catch specific exceptions rather than using a generic `except` block. This allows for more precise error handling and helps prevent masking unexpected errors.
:::
:::
:::

### Question 112 {.question}

::: {.smaller-80}
Which of the following are true about Jupyter notebooks? (Select all that apply)

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] They allow for mixing code, text, and visualizations in a single document
- [ ] They support multiple programming languages, not just Python
- [ ] They can be run in a web browser
- [ ] They require a powerful dedicated server to run
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] They allow for mixing code, text, and visualizations in a single document
- [x] They support multiple programming languages, not just Python
- [x] They can be run in a web browser
- [ ] They require a powerful dedicated server to run


::: {.explanation}
Jupyter notebooks allow for mixing code, text (with Markdown), and visualizations. They are flexible and support multiple languages through different kernels. They can run locally on a personal machine via a web browser, so a powerful dedicated server is not required.
:::
:::
:::
:::

### Question 113 {.question}

Fill in the blank: The average time complexity for dictionary operations (insert, delete, lookup) is O(___).

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] O(1)
- [ ] O(log n)
- [ ] O(n)
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] O(1)
- [ ] O(log n)
- [ ] O(n)


::: {.explanation}
Dictionary operations like insert, delete, and lookup generally have an average time complexity of O(1) due to the underlying hash table implementation.
:::
:::
:::

### Question 114 {.question}

Static methods behave like regular functions but belong to the class namespace.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] True
- [ ] False


::: {.explanation}
Static methods behave like regular functions, but they belong to the class namespace and are accessed through the class.
:::
:::
:::

### Question 115 {.question}

A(n) ___________ in the logger module allows you to send logs to different destinations like a file or the console.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
Answer: 
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
Answer: `handler`

::: {.explanation}
In the logging module, a handler determines where the log messages are sent. Different types of handlers can send logs to files, console output, email, or other destinations.
:::
:::
:::

### Question 116 {.question}

What logical comparison operator do you use to compare two values?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `==`
- [ ] `>`
- [ ] `<`
- [ ] `!=`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] `==`
- [ ] `>`
- [ ] `<`
- [ ] `!=`


::: {.explanation}
The `==` operator is used to compare two values for equality.
:::
:::
:::

### Question 117 {.question}

What is the result of the following code?

```python
numbers = [1, 2, 3, 4, 5]
print(numbers[2:])
```

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `[1, 2]`
- [ ] `[3, 4, 5]`
- [ ] `[1, 2, 3, 4, 5]`
- [ ] `[2, 3, 4, 5]`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `[1, 2]`
- [x] `[3, 4, 5]`
- [ ] `[1, 2, 3, 4, 5]`
- [ ] `[2, 3, 4, 5]`


::: {.explanation}
The slice `numbers[2:]` returns a new list starting from index 2 to the end, which includes `[3, 4, 5]`.
:::
:::
:::

### Question 118 {.question}

When performing comparisons in Python using operators like `==`, `>=`, `>`, `!=`, `<`, and `<=`, the result of the evaluation is always of what type?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] `int`
- [ ] `float`
- [ ] `bool`
- [ ] `str`
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] `int`
- [ ] `float`
- [x] `bool`
- [ ] `str`


::: {.explanation}
Logical comparisons in Python always return a boolean value: `True` or `False`.
:::
:::
:::

### Question 119 {.question}

All keyword arguments are not needed as long as those omitted arguments have default values in the function definition.

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] True
- [ ] False
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [x] True
- [ ] False


::: {.explanation}
As long as omitted arguments have default values defined in the function, they are not required when calling the function.
:::
:::
:::

### Question 120 {.question}

Which of the following is a key benefit of using setter methods in object-oriented programming?

::: {.r-stack}

::: {.absolute .left-0 .top-0 width=100%}
- [ ] They automatically optimize the performance of attribute access.
- [ ] They allow for data validation, preventing invalid states.
- [ ] They enable automatic synchronization with external databases.
- [ ] They provide built-in encryption for sensitive attributes.
:::

::: {.fragment .fade-in .absolute .left-0 .top-0 width=100%}
- [ ] They automatically optimize the performance of attribute access.
- [x] They allow for data validation, preventing invalid states.
- [ ] They enable automatic synchronization with external databases.
- [ ] They provide built-in encryption for sensitive attributes.


::: {.explanation}
Setter methods allow for data validation, ensuring that attributes are set to valid values and preventing invalid states in an object.
:::
:::
:::

